// Channels
//	CHAN_AUTO		= 0,
//	CHAN_WEAPON		= 1,
//	CHAN_VOICE		= 2,
//	CHAN_ITEM		= 3,
//	CHAN_BODY		= 4,
//	CHAN_STREAM		= 5,		// allocate stream channel from the static or dynamic area
//	CHAN_STATIC		= 6,		// allocate channel from the static area 
// these can be set with "channel" "2" or "channel" "chan_voice"


"DotaMusic.GameStartup"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{	
		"wave"		"#music\gamestartup1.mp3"
		"wave"		"#music\gamestartup2.mp3"
		"wave"		"#music\gamestartup3.mp3"
	}
	"operator_stacks"
	{
		"update_stack"
		{			
			"import_stack" "dota_update_music_stereo"
			"volume_fade_out"
			{
				"input_max" "@get_worldmap_flag.output"
			}
		}
		"start_stack"
		{
			"set_worldmap_flag"
			{
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "dota_worldmap_flag"
				"input" "0.0"	
			}
		}
		
		"stop_stack"
		{

			"get_worldmap_flag"
			{
				"operator" "get_opvar_float"
				"execute_once" "true"
				"opvar" "dota_worldmap_flag"
			}
			"not_worldmap"
			{
				"operator" "math_float"
				"apply" "equals"
				"input1" "@get_worldmap_flag.output"
				"input2" "0.0"	
			}
			"play_secondary_ui_entry"
			{
				"input_execute" "@not_worldmap.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DotaMusic.GameStartup.Secondary" //Replace with the sound you want to play.
			}
		}
	}
}

"DotaMusic.GameStartup.Secondary"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.5"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"#music\ui_underscore1.mp3"
		"wave"			"#music\ui_underscore2.mp3"
	}
	"operator_stacks"
	{
		"update_stack"
		{			
			"import_stack" "dota_update_music_stereo"
			"volume_fade_out"
			{
				"input_max" "@get_worldmap_flag.output"
			}
		}
		
		"stop_stack"
		{
			"get_worldmap_flag"
			{
				"operator" "get_opvar_float"
				"execute_once" "true"
				"opvar" "dota_worldmap_flag"
			}
			"not_worldmap"
			{
				"operator" "math_float"
				"apply" "equals"
				"input1" "@get_worldmap_flag.output"
				"input2" "0.0"	
			}
			"repeat_secondary_ui_entry"
			{
				"input_execute" "@not_worldmap.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DotaMusic.GameStartup.Secondary" //Replace with the sound you want to play.
			}
		}
	}
}

"DotaMusic.WorldMap"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"

	"operator_stacks"
	{
		"start_stack"
		{
			"set_worldmap_flag"
			{
				"operator" "set_opvar_float"
				"opvar" "dota_worldmap_flag"
				"input" "3.5"	
			}
			"stop_gamestartup"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000"
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DotaMusic.GameStartup"
			}
		}
		"update_stack"
		{
			"import_stack" 	"update_stop_and_play_at_time"
			"uspat_play_entry"
			{
				"entry_name" "DotaMusic.WorldMap.Actual"

			}
			"uspat_stop_time"
			{
				"input1" "@uspat_elapsed_time.output_entry_elapsed"
				"input2" "4.0"
			}
		}
	}
}

"DotaMusic.WorldMap.Actual"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"wave"		 "#music\world_map.mp3"
}

"DOTAMusic.MainLoop" //A loop that runs at all times and does a bunch of music-related utility stuff
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null_lp.wav"
	"soundentry_version" "2"
	"operator_stacks"
	{
		
		"start_stack"
		{
            // "init_current_music_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            // {
				// "operator" "set_opvar_float"
				// "execute_once" "true"
				// "opvar" "current_music"
				// "input" "0.0"
			// }
			
			"get_mainloop_flag"
			{
				"operator" "get_opvar_float"
				"execute_once" "true"
				"opvar" "dota_music_mainloop_flag"
			}
			
            "turn_debug_printing_on" //set the opvar to 0.0 unless you are debugging
            {
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "debug_print_music"
				"input" "0.0"
			}

			"block_start"
			{	
				"input_execute" "@get_mainloop_flag.output"
				//"input_execute" "@percent_null.output"
				"operator" "sys_output"
				"input_float" "1"
				"output" "block_start"
			}
			
			"set_mainloop_flag"
			{
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "dota_music_mainloop_flag"
				"input" "1.0"			
			}
		}
		
		"update_stack"
		{	
		
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}      
			
			"get_currently_playing_music" //Keeping track of what music is playing at a given moment
			{
				"operator" "get_opvar_float"
				"opvar" "current_music"
			} 		
			
			//BLOCKSTART //BATTLE SMOOTH
			//////////////////////////////////
			// BEGIN BATTLE SCORE SMOOTHING //////
			//////////////////////////////////		
			
			"import_stack" "dota_opvar_smoothing_update"
			
			////////////////////////
			//SPECTATOR MODE SHIT //
			////////////////////////
			
			"get_spectator_score_opvar"
			{
				"opvar" "music_spectator_priority"
			}
			
			///////////////////////
			//END SPECTATOR MODE //
			///////////////////////
			
			"get_live_value_opvar" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity"
			}
			
			"get_smooth_value_opvar" //get our smoothed version of the battle score
			{
				"opvar" "dota_battle_score_smooth"
			}		
		
			"get_live_value_opvar_tutorial" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity_tutorial" 
			}	
				
			"remap_travel_distance_to_time"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.001"	
				"input_X2" "5.0"	
				"input_Y2" "0.6"
				"input_X3" "10.0"	
				"input_Y3" "3.0"	
				"input_X4" "30.0"	
				"input_Y4" "2.75"	
			}		
		
			"remap_travel_distance_to_time_falling"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.1"	
				"input_X2" "0.1"	
				"input_Y2" "0.5"	
				"input_X3" "5.0"	
				"input_Y3" "6"	
				"input_X4" "15.0"	
				"input_Y4" "7"	
			}
			
			"set_opvar" //set the current smooth opvar val
			{
				"opvar" "dota_battle_score_smooth"
			}
		
			"remap_smooth_to_one_dot_zero"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@opvar_value_ramp.output"
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "7.0"	
				"input_Y2" "0.75"	
				"input_X3" "25.0"	
				"input_Y3" "1.0"	
				"input_X4" "25.0"	
				"input_Y4" "1.0"	
			}
			
			"set_music_intensity_remap_opvar"
			{
				"operator" "set_opvar_float"
				"opvar" "dota_battle_score_smooth_remap"
				"input" "@remap_smooth_to_one_dot_zero.output"
			}
			
			"battle_music_score_delta" 
			{
				"operator" "math_delta"
				"input" "@get_smooth_value_opvar.output"	
			}
			
			"battle_music_score_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@battle_music_score_delta.output"
				"input2" "0.0"
			}
			
			"battle_music_score_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "0.0"
				// "input1" "@battle_music_score_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"****PRINT_BATTLE_RAMP****" //print the smooth val
			{
				"input_execute" "@battle_music_score_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@remap_smooth_to_one_dot_zero.output"  //"input" "@get_smooth_value_opvar.output"
			}	
			
			////////////////////////////////////////////////////////
			
			
			"spectator_music_score_delta" 
			{
				"operator" "math_delta"
				"input" "@get_spectator_score_opvar.output"	
			}
			
			"spectator_music_score_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@spectator_music_score_delta.output"
				"input2" "0.0"
			}
			
			"spectator_music_score_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@spectator_music_score_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"****PRINT_SPECTATOR_SCORE****" //print the smooth val
			{
				"input_execute" "@spectator_music_score_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@get_spectator_score_opvar.output"  //"input" "@get_smooth_value_opvar.output"
			}	
			
			//////////////////////////////////////////////////////////////
			
			//BLOCKEND
			
			//BLOCKSTART //SPECIAL CASE SPECTATOR STUFF
			//get_current_spectator_status
			//get_currently_playing_music
			//get_current_game_time
			
			"get_music_game_state"
			{
				"operator" "get_opvar_float"
				"execute_once" "false"
				"opvar" "music_game_state"
			}
			
			// "****MUSIC_GAME_STATE****" //print the smooth val
			// {
				// "input_execute" "@get_debug_printing_opvar.output"
				// "operator" "util_print_float"
				// "input" "@get_music_game_state.output"  //"input" "@get_smooth_value_opvar.output"
			// }
			
			// "****MUSIC_PREGAME_TIME****" //print the smooth val
			// {
				// "input_execute" "@get_debug_printing_opvar.output"
				// "operator" "util_print_float"
				// "input" "@get_current_pregame_time.output"  //"input" "@get_smooth_value_opvar.output"
			// }
			
			"spectator_music_current_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@get_currently_playing_music.output"
				"input2" "0.0"
			}
			
			"spectator_music_should_play_hero_picker_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@get_music_game_state.output"
				"input2" "2.0"
			}
			
			"spectator_music_should_play_prehorn_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@get_music_game_state.output"
				"input2" "4.0"
			}
			
			"spectator_music_no_music_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@get_current_spectator_status.output"
				"input2" "@spectator_music_current_music_compare.output"
			}
			
			"spectator_music_should_play_hero_picker_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@spectator_music_no_music_and.output"
				"input2" "@spectator_music_should_play_hero_picker_compare.output"
			}
			
			"spectator_music_should_play_prehorn_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@spectator_music_no_music_and.output"
				"input2" "@spectator_music_should_play_prehorn_compare.output"
			}	
			
			"spectator_music_time_for_prehorn_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@get_current_pregame_time.output"
				"input2" "70.0"
			}
			
			"spectator_music_should_play_prehorn_time_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@spectator_music_should_play_prehorn_and.output"
				"input2" "@spectator_music_time_for_prehorn_compare.output"
			}	
			
			"play_hero_picker_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				"input_execute"	"@spectator_music_should_play_hero_picker_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.HeroPicker" //Replace with the sound you want to play.
			}
			
			"play_prehorn_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				"input_execute"	"@spectator_music_should_play_prehorn_time_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.Prehorn" //Replace with the sound you want to play.
			}
			
			//BLOCKEND
			
			//BLOCKSTART //CURRENT MUSIC DEBUG
			//////////////////////////////////////
			// CURRENT MUSIC DEBUG ///////////////
			//////////////////////////////////////       
			
			"current_music_floor_max"
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "max"		
				"input1" "@get_currently_playing_music.output"
				"input2" "0.0"
			}	
						
			"set_currently_playing_music_floor" //If the opvar drops below 0.0, set it to 0.0.  This should never happen and is only here as a fail-safe.
			{
				"operator" "set_opvar_float"
				"opvar" "current_music"
				"input" "@current_music_floor_max.output"
			}   
			// 0) NONE
			// 2) Explore
			// 4) Battle
			// 8) DO NOT USE!!!! //Possible to have 2 battle musics!
			// 16) Dead
			// 32) Respawn - Transition out of Dead
			// 64) Buyback - Transition out of Dead
			// 128) Roshan
			// 256) Gank
			// 512) Ganked
			// 1024) Win
			// 2048) Lose
			// 4096) Prehorn
			// 8192) Smoked
			// 16384) Chasing
			// 32768) Chased
			// 65536) Hero Picker
			// 131072) Explore Picker
			// 262144)
			// 524288)
			// 1048576)
			// 2097152)
			
			
			"music_type_delta" 
			{
				"operator" "math_delta"
				"input" "@current_music_floor_max.output"	
			}
			
			"music_type_delta_abs"
			{
				"input_execute"	"1.0"	
				"operator" 	"math_func1"
				"function"	"fabs"		
				"input1" 	"@music_type_delta.output"
			}	
			
			"music_type_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@music_type_delta_abs.output"
				"input2" "0.0"
			}
			
			"music_type_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@music_type_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"**************MUSIC_TYPE_PRINT**************" //print the smooth val
			{
				"input_execute" "@music_type_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@current_music_floor_max.output"
			}
			//BLOCKEND
			
			//////////////////////////////////////////////////
			// BEGIN MUSIC PICKING "STATE MACHINE" ///////////
			//////////////////////////////////////////////////
			
			//BLOCKSTART //EXPLORE STATE
			////////////////////////////////////
			// STATE: Explore Music ////////////
			////////////////////////////////////
			"start_explore_timer" //if no other music is playing, we kick off our timer
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@current_music_floor_max.output"
				"input2" "0.0"
			}
			
			"stop_explore_timer" //if other music is playing, we don't try to play explore
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@current_music_floor_max.output"
				"input2" "1.0"
			}
			
			"get_explore_played_opvar" //Keeping track of what music is playing at a given moment
			{
				"operator" "get_opvar_float"
				"opvar" "explore_was_played"
			}
			
			"stop_explore_timer_max" //we have to test if explore music was _just_ played becuase otherwise we get into a weird state
			{
				"operator" "math_float"
				"apply" "max"	
				"input1" "@stop_explore_timer.output"
				"input2" "@get_explore_played_opvar.output"
			}
			
			"explore_timer_ramp"  //wait 5 seconds before trying to play explore music
			{
				"operator" "util_timer_ramp"
				"input_start" "@start_explore_timer.output"
				"input_stop" "@stop_explore_timer.output"
				"input_start_value" "5.0"
				"input_end_value" "0.0"
				"input_duration" "5.0"
			}			
			
			"other_music_playing_compare"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@explore_timer_ramp.output"
				"input2" "0.0"
			}			
			
			"other_music_playing_compare_min"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@other_music_playing_compare.output"
				"input2" "@start_explore_timer.output"
			}
			
			"set_explore_played_opvar" //if we're going to play explore music, set this opvar.
			{
				"operator" "set_opvar_float"
				"execute_once" "false"
				"opvar" "explore_was_played"
				"input" "@other_music_playing_compare_min.output"
			}
			
			"play_explore_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute"	"@other_music_playing_compare_min.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateExploreMusic" //Replace with the sound you want to play.
			}

            // "stop_ramp_execution" //debug
            // {
				// "operator" "set_convar"
				// "input_execute"	"@other_music_playing_compare_min.output"
				// "convar" "snd_sos_exec_when_paused"
				// "input" "0"
			// }			
			//BLOCKEND
			
			//BLOCKSTART //BATTLE MUSIC STATE
			////////////////////////////////////
			// STATE: Battle Music /////////////
			////////////////////////////////////	
			"state_battle_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_battle_music_request"	
			}
			
			// "**************BATTLE MUSIC REQUESTED**************" 
			// {
				// "execute_once" "false"
				// "input_execute" "@state_battle_music_request_opvar.output"
				// "operator" "util_print_float"
				// "input" "@state_battle_music_request_opvar.output"
			// }
			
			"play_battle_epic_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@state_battle_music_request_opvar.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateBattleMusic" //Replace with the sound you want to play.
			}			
			
			"set_battle_played_opvar" //if we're going to play explore music, set this opvar.
			{
				"input_execute" "@state_battle_music_request_opvar.output"
				"operator" "set_opvar_float"
				"opvar" "state_battle_music_request"
				"input" "0.0"
			}
			//BLOCKEND
			
			//BLOCKSTART //DEAD MUSIC STATE
			////////////////////////////////////
			// STATE: Death Music ///////////////
			////////////////////////////////////	
			"state_death_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_death_music_request"	
			}
			
			// "**************DEATH MUSIC REQUESTED**************" 
			// {
				// "execute_once" "false"
				// "input_execute" "@state_death_music_request_opvar.output"
				// "operator" "util_print_float"
				// "input" "@state_death_music_request_opvar.output"
			// }
			
			"play_death_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@state_death_music_request_opvar.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateHeroDeath" //Replace with the sound you want to play.
			}			
			
			"set_death_played_opvar" //if we're going to play explore music, set this opvar.
			{
				"input_execute" "@state_death_music_request_opvar.output"
				"operator" "set_opvar_float"
				"opvar" "state_death_music_request"
				"input" "0.0"
			}
			
			
			//BLOCKEND
			
			//BLOCKSTART //GANK MUSIC STATE
			////////////////////////////////////
			// STATE: Gank Music ///////////////
			////////////////////////////////////
			
			"state_gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}	
			
			"gank_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_gank_music_request_opvar.output"	
			}
			
			"gank_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@gank_music_delta.output"
				"input2" "0.0"
			}
			
			"gank_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@gank_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			//Gank Player
			
			"gank_music_value_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@state_gank_music_request_opvar.output"
				"input2" "0.15"
			}
			
			"gank_music_player_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@gank_music_delta_compare.output"
				"input2" "@gank_music_value_compare.output"
			}
			
			"gank_music_player" //play 
			{
				"input_execute"	"@gank_music_player_compare_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateGankMusic" //Replace with the sound you want to play.
			}	
			
			"**************GANK_MUSIC_PRCT**************" //print the smooth val
			{
				"input_execute" "@gank_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_gank_music_request_opvar.output"
			}
			//BLOCKEND
			
			//BLOCKSTART //GANKED MUSIC STATE
			////////////////////////////////////
			// STATE: Ganked Music /////////////
			////////////////////////////////////
			"state_ganked_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}		
			
			"ganked_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_ganked_music_request_opvar.output"	
			}
			
			"ganked_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@ganked_music_delta.output"
				"input2" "0.0"
			}
			
			"ganked_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@ganked_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			//Ganked Player
			
			"ganked_music_value_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@state_ganked_music_request_opvar.output"
				"input2" "0.15"
			}
			
			"ganked_music_player_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@ganked_music_delta_compare.output"
				"input2" "@ganked_music_value_compare.output"
			}
			
			"ganked_music_player" //play 
			{
				"input_execute"	"@ganked_music_player_compare_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateGankedMusic" //Replace with the sound you want to play.
			}	
						
			"**************GANKED_MUSIC_PRCT**************" //print the smooth val
			{
				"input_execute" "@ganked_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_ganked_music_request_opvar.output"
			}
			//BLOCKEND
			
			//BLOCKSTART //WIN MUSIC STATE
			////////////////////////////////////
			// STATE: Win Music ////////////////
			////////////////////////////////////
			"state_win_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_win_music_request"	
			}		
			//BLOCKEND
			
			//BLOCKSTART //LOSE MUSIC STATE
			////////////////////////////////////
			// STATE: Lose Music ///////////////
			////////////////////////////////////	
			"state_lose_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_lose_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //PREHORN MUSIC STATE
			////////////////////////////////////
			// STATE: Prehorn Music ////////
			////////////////////////////////////	
			"state_prehorn_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_prehorn_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //SMOKED MUSIC STATE
			////////////////////////////////////
			// STATE: Smoked Music ////////////
			////////////////////////////////////
			"state_smoked_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_smoke_request"	
			}	
			
			"state_smoked_music_end_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_smoke_end_state"	
			}	
			
			"smoke_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_smoked_music_request_opvar.output"	
			}
			
			"smoke_popped_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@smoke_music_delta.output"
				"input2" "0.0"
			}
			
			//SMOKE POPPED			
			
			"smoke_popped_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_request_opvar.output"
				"input2" "1.0"
			}
			
			"smoke_popped_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_popped_music_compare.output"
			}				
			
			"play_smoke_popped_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_popped_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokePopped" //Replace with the sound you want to play.
			}	
			
			//SMOKE ENDED (ENEMY HERO)			
			
			"smoke_ended_hero_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_end_opvar.output"
				"input2" "3.0"
			}
			
			"smoke_ended_hero_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_ended_hero_music_compare.output"
			}				
			
			"play_smoke_ended_hero_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_ended_hero_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokeEndedHero" //Replace with the sound you want to play.
			}
			
			//SMOKE ENDED (TOWER)			
			
			"smoke_ended_tower_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_end_opvar.output"
				"input2" "2.0"
			}
			
			"smoke_ended_tower_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_ended_tower_music_compare.output"
			}				
			
			"play_smoke_ended_tower_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_ended_tower_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokeEndedTower" //Replace with the sound you want to play.
			}	
			
			//SMOKE ENDED (ATTACKED CREEP)			
			
			"smoke_ended_creep_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_end_opvar.output"
				"input2" "1.0"
			}
			
			"smoke_ended_creep_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_ended_creep_music_compare.output"
			}				
			
			"play_smoke_ended_creep_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_ended_creep_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokeEndedCreep" //Replace with the sound you want to play.
			}	
			
			
			//SMOKE PRINTING
			"smoke_music_delta_printing_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"**************SMOKE_MUSIC_PRINT**************" //print the smooth val
			{
				"input_execute" "@smoke_music_delta_printing_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_smoked_music_request_opvar.output"
			}
			
			"**************SMOKE_MUSIC_END_PRINT**************" //print the smooth val
			{
				"input_execute" "@smoke_music_delta_printing_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_smoked_music_end_opvar.output"
			}
			//BLOCKEND
			
			//BLOCKSTART //CHASING MUSIC STATE
			////////////////////////////////////
			// STATE: Chasing Music ////////////
			////////////////////////////////////	
			"state_chasing_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_chasing_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //CHASED MUSIC STATE
			////////////////////////////////////
			// STATE: Chased Music /////////////
			////////////////////////////////////	
			"state_chased_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_chased_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //ROSHAN MUSIC STATE
			////////////////////////////////////
			// STATE: Roshan Music ////////////
			////////////////////////////////////
			"state_roshan_music_attack_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_attack_state"	
			}	
			
			"state_roshan_music_health_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_health_state"	
			}
			
			//FOR DEBUG PRINTING
			"roshan_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_roshan_music_attack_opvar.output"	
			}
			
			"roshan_music_health_delta" 
			{
				"operator" "math_delta"
				"input" "@state_roshan_music_health_opvar.output"	
			}
			
			"roshan_music_delta_abs"
			{
				"input_execute"	"1.0"	
				"operator" 	"math_func1"
				"function"	"fabs"		
				"input1" 	"@roshan_music_delta.output"
			}	
			
			"roshan_music_health_delta_abs"
			{
				"input_execute"	"1.0"	
				"operator" 	"math_func1"
				"function"	"fabs"		
				"input1" 	"@roshan_music_health_delta.output"
			}	
			
			"roshan_music_delta_compare_or" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "max"		
				"input1" "@roshan_music_delta_abs.output"
				"input2" "@roshan_music_health_delta_abs.output"
			}
			
			"roshan_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@roshan_music_delta_compare_or.output"
				"input2" "0.0"
			}
			
			"roshan_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"**************ROSHAN_MUSIC_ATTACK_PRINT**************" //print the smooth val
			{
				"input_execute" "@roshan_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_roshan_music_attack_opvar.output"
			}
			
			"**************ROSHAN_MUSIC_HEALTH_PRINT**************" //print the smooth val
			{
				"input_execute" "@roshan_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_roshan_music_health_opvar.output"
			}
			// END DEBUG PRINTING 
			
			//ROSHAN ATTACKED
				
			"roshan_music_attacked_delta" 
			{
				"operator" "math_delta"
				"input" "@state_roshan_music_attack_opvar.output"	
			}
			
			"roshan_music_attacked_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@roshan_music_attacked_delta.output"
				"input2" "0.0"
			}
			
			"roshan_music_attacked_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_roshan_music_attack_opvar.output"
				"input2" "1.0"
			}
			
			"roshan_music_attacked_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_attacked_compare.output"
				"input2" "@roshan_music_attacked_delta_compare.output"
			}	
			
			"roshan_music_attacked_health_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@state_roshan_music_health_opvar.output"
				"input2" "100.0"
			}
			
			"roshan_music_attacked_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_attacked_health_compare.output"
				"input2" "@roshan_music_attacked_delta_compare_and.output"
			}	
			
			"roshan_music_attacked_already_playing" //make sure we're not already playing rosh music
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@get_currently_playing_music.output"
				"input2" "128" //ROSHAN 
			}			
						
			"roshan_music_attacked_greater_than_equal" //are we playing battle music (or higher ID)?
			{
				"operator" "math_float"
				"apply"	"greater_than_or_equal" 
				"input1" "@get_currently_playing_music.output"
				"input2" "256" //higher than battle
			}	
						
			"roshan_music_attacked_playing_or" //are we playing battle music (or higher ID)?
			{
				"operator" "math_float"
				"apply"	"max"
				"input1" "@roshan_music_attacked_greater_than_equal.output"
				"input2" "@roshan_music_attacked_already_playing.output"
			}	
						
			"roshan_music_attacked_play_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_attacked_playing_or.output"
				"input2" "@roshan_music_attacked_compare_and.output"
			}	
			
			"play_roshan_attacked_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@roshan_music_attacked_play_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateRoshanMusic" //Replace with the sound you want to play.
			}	
			
			//ROSHAN KILLED
			
			"roshan_music_killed_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@roshan_music_attacked_delta.output"
				"input2" "0.0"
			}
			
			"roshan_music_killed_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_roshan_music_attack_opvar.output"
				"input2" "2.0"
			}
			
			"roshan_music_killed_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_killed_delta_compare.output"
				"input2" "@roshan_music_killed_compare.output"
			}	
			
			"roshan_music_killed_health_compare" // probably not needed
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than_or_equal"		
				"input1" "@state_roshan_music_health_opvar.output"
				"input2" "5.0" //sometimes it doesn't get set to zero
			}
			
			"roshan_music_killed_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_killed_health_compare.output"
				"input2" "@roshan_music_killed_delta_compare_and.output"
			}	
			
			"play_roshan_killed_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@roshan_music_killed_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateRoshanKilled" //Replace with the sound you want to play.
			}	
			
			//ROSHAN NOT KILLED, PLAYER LEFT			
			
			"roshan_music_retreated_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@roshan_music_attacked_delta.output"
				"input2" "0.0"
			}		
			
			"roshan_music_retreated_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_roshan_music_attack_opvar.output"
				"input2" "0.0"
			}
			
			"roshan_music_retreated_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_retreated_compare.output"
				"input2" "@roshan_music_retreated_delta_compare.output"
			}	
			
			"roshan_music_stop"
			{
				"input_execute"	"@roshan_music_retreated_compare_and.output"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Roshan_01" //We allow no instances of Explore when the death stinger knells		
			}			

			"speakers_limit"
			{
				"operator"      "math_speakers"
				"apply"	       "mult"
				"left_front"   "1.0"	
				"right_front"  "1.0"	
				"center"       "0.0"	
				"lfe"          "0.0"	
				"left_rear"    "0.8"
				"right_rear"   "0.8"	
				
				"input2[*]" "0.01"		
			}

			"speakers_output"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			//BLOCKEND
		}
		
		"stop_stack"
		{		
			"set_mainloop_flag"
			{
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "dota_music_mainloop_flag"
				"input" "0.0"			
			}
		}
	}
}



"DOTAMusic.MainLoopTutorial" //A loop that runs at all times and does a bunch of music-related utility stuff
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null_lp.wav"
	"soundentry_version" "2"
	"operator_stacks"
	{
		
		"start_stack"
		{
            // "init_current_music_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            // {
				// "operator" "set_opvar_float"
				// "execute_once" "true"
				// "opvar" "current_music"
				// "input" "0.0"
			// }
			
			"get_mainloop_flag"
			{
				"operator" "get_opvar_float"
				"execute_once" "true"
				"opvar" "dota_music_mainloop_flag"
			}
			
            "turn_debug_printing_on" //set the opvar to 0.0 unless you are debugging
            {
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "debug_print_music"
				"input" "0.0"
			}

			"block_start"
			{	
				"input_execute" "@get_mainloop_flag.output"
				//"input_execute" "@percent_null.output"
				"operator" "sys_output"
				"input_float" "1"
				"output" "block_start"
			}
			
			"set_mainloop_flag"
			{
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "dota_music_mainloop_flag"
				"input" "1.0"			
			}
		}
		
		"update_stack"
		{	
		
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}      
			
			"get_currently_playing_music" //Keeping track of what music is playing at a given moment
			{
				"operator" "get_opvar_float"
				"opvar" "current_music"
			} 		
			
			//BLOCKSTART //BATTLE SMOOTH
			//////////////////////////////////
			// BEGIN BATTLE SCORE SMOOTHING //////
			//////////////////////////////////		
			
			"import_stack" "dota_opvar_smoothing_update"
			
			////////////////////////
			//SPECTATOR MODE SHIT //
			////////////////////////
			
			"get_spectator_score_opvar"
			{
				"opvar" "music_spectator_priority"
			}
			
			///////////////////////
			//END SPECTATOR MODE //
			///////////////////////
			
			"get_live_value_opvar" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity"
			}
			
			"get_smooth_value_opvar" //get our smoothed version of the battle score
			{
				"opvar" "dota_battle_score_smooth"
			}		
		
			"get_live_value_opvar_tutorial" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity_tutorial" 
			}	
				
			"remap_travel_distance_to_time"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.001"	
				"input_X2" "5.0"	
				"input_Y2" "0.6"
				"input_X3" "10.0"	
				"input_Y3" "3.0"	
				"input_X4" "30.0"	
				"input_Y4" "2.75"	
			}		
		
			"remap_travel_distance_to_time_falling"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.1"	
				"input_X2" "0.1"	
				"input_Y2" "0.5"	
				"input_X3" "5.0"	
				"input_Y3" "6"	
				"input_X4" "15.0"	
				"input_Y4" "7"	
			}
			
			"set_opvar" //set the current smooth opvar val
			{
				"opvar" "dota_battle_score_smooth"
			}
		
			"remap_smooth_to_one_dot_zero"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@opvar_value_ramp.output"
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "7.0"	
				"input_Y2" "0.75"	
				"input_X3" "25.0"	
				"input_Y3" "1.0"	
				"input_X4" "25.0"	
				"input_Y4" "1.0"	
			}
			
			"set_music_intensity_remap_opvar"
			{
				"operator" "set_opvar_float"
				"opvar" "dota_battle_score_smooth_remap"
				"input" "@remap_smooth_to_one_dot_zero.output"
			}
			
			"battle_music_score_delta" 
			{
				"operator" "math_delta"
				"input" "@get_smooth_value_opvar.output"	
			}
			
			"battle_music_score_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@battle_music_score_delta.output"
				"input2" "0.0"
			}
			
			"battle_music_score_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "0.0"
				// "input1" "@battle_music_score_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"****PRINT_BATTLE_RAMP****" //print the smooth val
			{
				"input_execute" "@battle_music_score_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@remap_smooth_to_one_dot_zero.output"  //"input" "@get_smooth_value_opvar.output"
			}	
			
			////////////////////////////////////////////////////////
			
			
			"spectator_music_score_delta" 
			{
				"operator" "math_delta"
				"input" "@get_spectator_score_opvar.output"	
			}
			
			"spectator_music_score_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@spectator_music_score_delta.output"
				"input2" "0.0"
			}
			
			"spectator_music_score_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@spectator_music_score_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"****PRINT_SPECTATOR_SCORE****" //print the smooth val
			{
				"input_execute" "@spectator_music_score_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@get_spectator_score_opvar.output"  //"input" "@get_smooth_value_opvar.output"
			}	
			
			//////////////////////////////////////////////////////////////
			
			//BLOCKEND
						
			//BLOCKSTART //CURRENT MUSIC DEBUG
			//////////////////////////////////////
			// CURRENT MUSIC DEBUG ///////////////
			//////////////////////////////////////       
			
			"current_music_floor_max"
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "max"		
				"input1" "@get_currently_playing_music.output"
				"input2" "0.0"
			}	
						
			"set_currently_playing_music_floor" //If the opvar drops below 0.0, set it to 0.0.  This should never happen and is only here as a fail-safe.
			{
				"operator" "set_opvar_float"
				"opvar" "current_music"
				"input" "@current_music_floor_max.output"
			}   
			// 0) NONE
			// 2) Explore
			// 4) Battle
			// 8) DO NOT USE!!!! //Possible to have 2 battle musics!
			// 16) Dead
			// 32) Respawn - Transition out of Dead
			// 64) Buyback - Transition out of Dead
			// 128) Roshan
			// 256) Gank
			// 512) Ganked
			// 1024) Win
			// 2048) Lose
			// 4096) Prehorn
			// 8192) Smoked
			// 16384) Chasing
			// 32768) Chased
			// 65536) Hero Picker
			// 131072) Explore Picker
			// 262144)
			// 524288)
			// 1048576)
			// 2097152)
			
			
			"music_type_delta" 
			{
				"operator" "math_delta"
				"input" "@current_music_floor_max.output"	
			}
			
			"music_type_delta_abs"
			{
				"input_execute"	"1.0"	
				"operator" 	"math_func1"
				"function"	"fabs"		
				"input1" 	"@music_type_delta.output"
			}	
			
			"music_type_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@music_type_delta_abs.output"
				"input2" "0.0"
			}
			
			"music_type_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@music_type_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"**************MUSIC_TYPE_PRINT**************" //print the smooth val
			{
				"input_execute" "@music_type_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@current_music_floor_max.output"
			}
			//BLOCKEND
			
			//////////////////////////////////////////////////
			// BEGIN MUSIC PICKING "STATE MACHINE" ///////////
			//////////////////////////////////////////////////
			
			//BLOCKSTART //EXPLORE STATE
			////////////////////////////////////
			// STATE: Explore Music ////////////
			////////////////////////////////////
			"start_explore_timer" //if no other music is playing, we kick off our timer
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@current_music_floor_max.output"
				"input2" "0.0"
			}
			
			"stop_explore_timer" //if other music is playing, we don't try to play explore
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@current_music_floor_max.output"
				"input2" "1.0"
			}
			
			"get_explore_played_opvar" //Keeping track of what music is playing at a given moment
			{
				"operator" "get_opvar_float"
				"opvar" "explore_was_played"
			}
			
			"stop_explore_timer_max" //we have to test if explore music was _just_ played becuase otherwise we get into a weird state
			{
				"operator" "math_float"
				"apply" "max"	
				"input1" "@stop_explore_timer.output"
				"input2" "@get_explore_played_opvar.output"
			}
			
			"explore_timer_ramp"  //wait 5 seconds before trying to play explore music
			{
				"operator" "util_timer_ramp"
				"input_start" "@start_explore_timer.output"
				"input_stop" "@stop_explore_timer.output"
				"input_start_value" "5.0"
				"input_end_value" "0.0"
				"input_duration" "5.0"
			}			
			
			"other_music_playing_compare"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@explore_timer_ramp.output"
				"input2" "0.0"
			}			
			
			"other_music_playing_compare_min"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@other_music_playing_compare.output"
				"input2" "@start_explore_timer.output"
			}
			
			"set_explore_played_opvar" //if we're going to play explore music, set this opvar.
			{
				"operator" "set_opvar_float"
				"execute_once" "false"
				"opvar" "explore_was_played"
				"input" "@other_music_playing_compare_min.output"
			}
			
			"play_explore_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute"	"@other_music_playing_compare_min.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateExploreMusic" //Replace with the sound you want to play.
			}

            // "stop_ramp_execution" //debug
            // {
				// "operator" "set_convar"
				// "input_execute"	"@other_music_playing_compare_min.output"
				// "convar" "snd_sos_exec_when_paused"
				// "input" "0"
			// }			
			//BLOCKEND
			
			//BLOCKSTART //BATTLE MUSIC STATE
			////////////////////////////////////
			// STATE: Battle Music /////////////
			////////////////////////////////////	
			"state_battle_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_battle_music_request"	
			}
			
			// "**************BATTLE MUSIC REQUESTED**************" 
			// {
				// "execute_once" "false"
				// "input_execute" "@state_battle_music_request_opvar.output"
				// "operator" "util_print_float"
				// "input" "@state_battle_music_request_opvar.output"
			// }
			
			"play_battle_epic_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@state_battle_music_request_opvar.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateBattleMusic" //Replace with the sound you want to play.
			}			
			
			"set_battle_played_opvar" //if we're going to play explore music, set this opvar.
			{
				"input_execute" "@state_battle_music_request_opvar.output"
				"operator" "set_opvar_float"
				"opvar" "state_battle_music_request"
				"input" "0.0"
			}
			//BLOCKEND
			
			//BLOCKSTART //DEAD MUSIC STATE
			////////////////////////////////////
			// STATE: Death Music ///////////////
			////////////////////////////////////	
			"state_death_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_death_music_request"	
			}
			
			// "**************DEATH MUSIC REQUESTED**************" 
			// {
				// "execute_once" "false"
				// "input_execute" "@state_death_music_request_opvar.output"
				// "operator" "util_print_float"
				// "input" "@state_death_music_request_opvar.output"
			// }
			
			"play_death_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@state_death_music_request_opvar.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateHeroDeath" //Replace with the sound you want to play.
			}			
			
			"set_death_played_opvar" //if we're going to play explore music, set this opvar.
			{
				"input_execute" "@state_death_music_request_opvar.output"
				"operator" "set_opvar_float"
				"opvar" "state_death_music_request"
				"input" "0.0"
			}
			
			
			//BLOCKEND
			
			//BLOCKSTART //GANK MUSIC STATE
			////////////////////////////////////
			// STATE: Gank Music ///////////////
			////////////////////////////////////
			
			"state_gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}	
			
			"gank_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_gank_music_request_opvar.output"	
			}
			
			"gank_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@gank_music_delta.output"
				"input2" "0.0"
			}
			
			"gank_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@gank_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			//Gank Player
			
			"gank_music_value_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@state_gank_music_request_opvar.output"
				"input2" "0.15"
			}
			
			"gank_music_player_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@gank_music_delta_compare.output"
				"input2" "@gank_music_value_compare.output"
			}
			
			"gank_music_player" //play 
			{
				"input_execute"	"@gank_music_player_compare_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateGankMusic" //Replace with the sound you want to play.
			}	
			
			"**************GANK_MUSIC_PRCT**************" //print the smooth val
			{
				"input_execute" "@gank_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_gank_music_request_opvar.output"
			}
			//BLOCKEND
			
			//BLOCKSTART //GANKED MUSIC STATE
			////////////////////////////////////
			// STATE: Ganked Music /////////////
			////////////////////////////////////
			"state_ganked_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}		
			
			"ganked_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_ganked_music_request_opvar.output"	
			}
			
			"ganked_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@ganked_music_delta.output"
				"input2" "0.0"
			}
			
			"ganked_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@ganked_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			//Ganked Player
			
			"ganked_music_value_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@state_ganked_music_request_opvar.output"
				"input2" "0.15"
			}
			
			"ganked_music_player_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@ganked_music_delta_compare.output"
				"input2" "@ganked_music_value_compare.output"
			}
			
			"ganked_music_player" //play 
			{
				"input_execute"	"@ganked_music_player_compare_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateGankedMusic" //Replace with the sound you want to play.
			}	
						
			"**************GANKED_MUSIC_PRCT**************" //print the smooth val
			{
				"input_execute" "@ganked_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_ganked_music_request_opvar.output"
			}
			//BLOCKEND
			
			//BLOCKSTART //WIN MUSIC STATE
			////////////////////////////////////
			// STATE: Win Music ////////////////
			////////////////////////////////////
			"state_win_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_win_music_request"	
			}		
			//BLOCKEND
			
			//BLOCKSTART //LOSE MUSIC STATE
			////////////////////////////////////
			// STATE: Lose Music ///////////////
			////////////////////////////////////	
			"state_lose_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_lose_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //PREHORN MUSIC STATE
			////////////////////////////////////
			// STATE: Prehorn Music ////////
			////////////////////////////////////	
			"state_prehorn_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_prehorn_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //SMOKED MUSIC STATE
			////////////////////////////////////
			// STATE: Smoked Music ////////////
			////////////////////////////////////
			"state_smoked_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_smoke_request"	
			}	
			
			"state_smoked_music_end_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_smoke_end_state"	
			}	
			
			"smoke_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_smoked_music_request_opvar.output"	
			}
			
			"smoke_popped_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@smoke_music_delta.output"
				"input2" "0.0"
			}
			
			//SMOKE POPPED			
			
			"smoke_popped_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_request_opvar.output"
				"input2" "1.0"
			}
			
			"smoke_popped_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_popped_music_compare.output"
			}				
			
			"play_smoke_popped_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_popped_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokePopped" //Replace with the sound you want to play.
			}	
			
			//SMOKE ENDED (ENEMY HERO)			
			
			"smoke_ended_hero_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_end_opvar.output"
				"input2" "3.0"
			}
			
			"smoke_ended_hero_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_ended_hero_music_compare.output"
			}				
			
			"play_smoke_ended_hero_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_ended_hero_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokeEndedHero" //Replace with the sound you want to play.
			}
			
			//SMOKE ENDED (TOWER)			
			
			"smoke_ended_tower_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_end_opvar.output"
				"input2" "2.0"
			}
			
			"smoke_ended_tower_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_ended_tower_music_compare.output"
			}				
			
			"play_smoke_ended_tower_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_ended_tower_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokeEndedTower" //Replace with the sound you want to play.
			}	
			
			//SMOKE ENDED (ATTACKED CREEP)			
			
			"smoke_ended_creep_music_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_smoked_music_end_opvar.output"
				"input2" "1.0"
			}
			
			"smoke_ended_creep_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@smoke_ended_creep_music_compare.output"
			}				
			
			"play_smoke_ended_creep_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@smoke_ended_creep_music_delta_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateSmokeEndedCreep" //Replace with the sound you want to play.
			}	
			
			
			//SMOKE PRINTING
			"smoke_music_delta_printing_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@smoke_popped_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"**************SMOKE_MUSIC_PRINT**************" //print the smooth val
			{
				"input_execute" "@smoke_music_delta_printing_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_smoked_music_request_opvar.output"
			}
			
			"**************SMOKE_MUSIC_END_PRINT**************" //print the smooth val
			{
				"input_execute" "@smoke_music_delta_printing_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_smoked_music_end_opvar.output"
			}
			//BLOCKEND
			
			//BLOCKSTART //CHASING MUSIC STATE
			////////////////////////////////////
			// STATE: Chasing Music ////////////
			////////////////////////////////////	
			"state_chasing_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_chasing_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //CHASED MUSIC STATE
			////////////////////////////////////
			// STATE: Chased Music /////////////
			////////////////////////////////////	
			"state_chased_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "state_chased_music_request"	
			}	
			//BLOCKEND
			
			//BLOCKSTART //ROSHAN MUSIC STATE
			////////////////////////////////////
			// STATE: Roshan Music ////////////
			////////////////////////////////////
			"state_roshan_music_attack_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_attack_state"	
			}	
			
			"state_roshan_music_health_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_health_state"	
			}
			
			//FOR DEBUG PRINTING
			"roshan_music_delta" 
			{
				"operator" "math_delta"
				"input" "@state_roshan_music_attack_opvar.output"	
			}
			
			"roshan_music_health_delta" 
			{
				"operator" "math_delta"
				"input" "@state_roshan_music_health_opvar.output"	
			}
			
			"roshan_music_delta_abs"
			{
				"input_execute"	"1.0"	
				"operator" 	"math_func1"
				"function"	"fabs"		
				"input1" 	"@roshan_music_delta.output"
			}	
			
			"roshan_music_health_delta_abs"
			{
				"input_execute"	"1.0"	
				"operator" 	"math_func1"
				"function"	"fabs"		
				"input1" 	"@roshan_music_health_delta.output"
			}	
			
			"roshan_music_delta_compare_or" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "max"		
				"input1" "@roshan_music_delta_abs.output"
				"input2" "@roshan_music_health_delta_abs.output"
			}
			
			"roshan_music_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than"		
				"input1" "@roshan_music_delta_compare_or.output"
				"input2" "0.0"
			}
			
			"roshan_music_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_delta_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}	
			
			"**************ROSHAN_MUSIC_ATTACK_PRINT**************" //print the smooth val
			{
				"input_execute" "@roshan_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_roshan_music_attack_opvar.output"
			}
			
			"**************ROSHAN_MUSIC_HEALTH_PRINT**************" //print the smooth val
			{
				"input_execute" "@roshan_music_delta_compare_and.output"
				"operator" "util_print_float"
				"input" "@state_roshan_music_health_opvar.output"
			}
			// END DEBUG PRINTING 
			
			//ROSHAN ATTACKED
				
			"roshan_music_attacked_delta" 
			{
				"operator" "math_delta"
				"input" "@state_roshan_music_attack_opvar.output"	
			}
			
			"roshan_music_attacked_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@roshan_music_attacked_delta.output"
				"input2" "0.0"
			}
			
			"roshan_music_attacked_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_roshan_music_attack_opvar.output"
				"input2" "1.0"
			}
			
			"roshan_music_attacked_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_attacked_compare.output"
				"input2" "@roshan_music_attacked_delta_compare.output"
			}	
			
			"roshan_music_attacked_health_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@state_roshan_music_health_opvar.output"
				"input2" "100.0"
			}
			
			"roshan_music_attacked_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_attacked_health_compare.output"
				"input2" "@roshan_music_attacked_delta_compare_and.output"
			}	
			
			"roshan_music_attacked_already_playing" //make sure we're not already playing rosh music
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@get_currently_playing_music.output"
				"input2" "128" //ROSHAN 
			}			
						
			"roshan_music_attacked_greater_than_equal" //are we playing battle music (or higher ID)?
			{
				"operator" "math_float"
				"apply"	"greater_than_or_equal" 
				"input1" "@get_currently_playing_music.output"
				"input2" "256" //higher than battle
			}	
						
			"roshan_music_attacked_playing_or" //are we playing battle music (or higher ID)?
			{
				"operator" "math_float"
				"apply"	"max"
				"input1" "@roshan_music_attacked_greater_than_equal.output"
				"input2" "@roshan_music_attacked_already_playing.output"
			}	
						
			"roshan_music_attacked_play_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_attacked_playing_or.output"
				"input2" "@roshan_music_attacked_compare_and.output"
			}	
			
			"play_roshan_attacked_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@roshan_music_attacked_play_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateRoshanMusic" //Replace with the sound you want to play.
			}	
			
			//ROSHAN KILLED
			
			"roshan_music_killed_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@roshan_music_attacked_delta.output"
				"input2" "0.0"
			}
			
			"roshan_music_killed_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_roshan_music_attack_opvar.output"
				"input2" "2.0"
			}
			
			"roshan_music_killed_delta_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_killed_delta_compare.output"
				"input2" "@roshan_music_killed_compare.output"
			}	
			
			"roshan_music_killed_health_compare" // probably not needed
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than_or_equal"		
				"input1" "@state_roshan_music_health_opvar.output"
				"input2" "5.0" //sometimes it doesn't get set to zero
			}
			
			"roshan_music_killed_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_killed_health_compare.output"
				"input2" "@roshan_music_killed_delta_compare_and.output"
			}	
			
			"play_roshan_killed_entry" 
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute" "@roshan_music_killed_compare_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.StateRoshanKilled" //Replace with the sound you want to play.
			}	
			
			//ROSHAN NOT KILLED, PLAYER LEFT			
			
			"roshan_music_retreated_delta_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "not_equal"		
				"input1" "@roshan_music_attacked_delta.output"
				"input2" "0.0"
			}		
			
			"roshan_music_retreated_compare" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "equals"		
				"input1" "@state_roshan_music_attack_opvar.output"
				"input2" "0.0"
			}
			
			"roshan_music_retreated_compare_and" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@roshan_music_retreated_compare.output"
				"input2" "@roshan_music_retreated_delta_compare.output"
			}	
			
			"roshan_music_stop"
			{
				"input_execute"	"@roshan_music_retreated_compare_and.output"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Roshan_01" //We allow no instances of Explore when the death stinger knells		
			}			

			"speakers_limit"
			{
				"operator"      "math_speakers"
				"apply"	       "mult"
				"left_front"   "1.0"	
				"right_front"  "1.0"	
				"center"       "0.0"	
				"lfe"          "0.0"	
				"left_rear"    "0.8"
				"right_rear"   "0.8"	
				
				"input2[*]" "0.01"		
			}

			"speakers_output"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			//BLOCKEND
		}
		
		"stop_stack"
		{		
			"set_mainloop_flag"
			{
				"operator" "set_opvar_float"
				"execute_once" "true"
				"opvar" "dota_music_mainloop_flag"
				"input" "0.0"			
			}
		}
	}
}



"DOTAMusic_Hero.Respawn"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/respawn.mp3"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic_Hero.BuyBack" //player buys back
{
	"channel"		"CHAN_AUTO"
	"volume"		".8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_010.mp3"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
			
			"import_stack" "dota_start_music_type_tracker"
				
			"add_music_value"
			{
				"input2" "64" //Buyback
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "64" //Buyback
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK MUSIC KILLED**************"
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic_Hero.BuyBackOther" //other buys back
{
	"channel"		"CHAN_AUTO"
	"volume"		".8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_010.mp3"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "buyback"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK OTHER MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	

			"block_buyback_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "6.5" //in seconds
				"match_substring" "false"
				"match_entry" "DOTAMusic_Hero.BuyBackOther" //The sound entry to use
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack"
		{	
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK OTHER MUSIC KILLED**************"
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic_Hero.BuyBackOtherRadiant" //other buys back
{
	"channel"		"CHAN_AUTO"
	"volume"		".8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_010.mp3"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "buyback"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK OTHER RADIANT MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	

			"block_buyback_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "6.5" //in seconds
				"match_substring" "false"
				"match_entry" "DOTAMusic_Hero.BuyBackOther" //The sound entry to use
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack"
		{	
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK OTHER MUSIC KILLED**************"
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic_Hero.BuyBackOtherDire" //other buys back
{
	"channel"		"CHAN_AUTO"
	"volume"		".8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_010.mp3"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "buyback"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK OTHER DIRE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	

			"block_buyback_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "6.5" //in seconds
				"match_substring" "false"
				"match_entry" "DOTAMusic_Hero.BuyBackOther" //The sound entry to use
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack"
		{	
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BUYBACK OTHER MUSIC KILLED**************"
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic_Hero.Death"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"music/null.wav"

	"operator_stacks"
	{
		"start_stack"
		{	
			"set_death_request_opvar"
			{
				"operator" "set_opvar_float"
				"opvar" "state_death_music_request"
				"input" "1.0"
			}	
		}
	}
}

"DOTAMusic.StateHeroDeath"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"#music/stingers/death.mp3"

	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_high_priority"
				//"sync_track_name" "main"
				"track_priority" "50"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
					}
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************TRANSITION TO DEATH MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"limit_sound_explore"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.Explore" //We allow no instances of Explore when the death stinger knells		
			}
			
			"limit_sound_laning"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.Laning"
			}
			
			"limit_sound_battle"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic" //We allow no instances of battle when the death stinger knells		
			}
			
			"stop_main_track"
			{
				"operator" "track_stop"
				"track_name" "main"
			}
		}
			
		"update_stack"
		{
			"import_stack" "dota_update_death_music"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic_Hero.DeathMode"
				"stop_channel_on_track" "true"	
			}
		}
	}
}

"DOTAMusic_Hero.Reincarnate" // plays spatialized when hero reincarnates - SK's ulti or Aegis holder
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.7"
	"soundlevel"  "SNDLVL_81dB"
	"wave"			")music/stingers/reincarnate.wav"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_low_priority"
				"track_priority" "1"	
			}
		}
	
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.25"
             "output" "delay"
            }
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************REINCARNATE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
			"speakers_spatialize"
			{
				"input_radius"  "600"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"
			}
		}
	}
}
//BLOCKSTART //STINGERS


"greevil_eventstart_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Greevil_camp_respawn.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}


"greevil_eventend_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Greevil_game_end.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"greevil_receive_present_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		".8"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Greevil_receive_present.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"greevil_camp_respawn_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Greevil_camp_respawn.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"greevil_mega_spawn_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Greevil_mega_spawn.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"greevil_loot_spawn_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Loot_Greevil_Spawn.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"greevil_loot_death_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/greevil_stingers/Loot_Greevil_death.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"diretide_eventstart_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"  "SNDLVL_81dB"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/halloween_stingers/roshan_trickortreat_start.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"diretide_select_target_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/halloween_stingers/roshan_select_target.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_low_priority"
				"track_priority" "1"	
			}
		}
	
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"**************REINCARNATE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"
			}
		}
	}
}

"diretide_sugarrush_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/halloween_stingers/roshan_sugar_rush.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_low_priority"
				"track_priority" "1"	
			}
		}
	
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"**************REINCARNATE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"
			}
		}
	}
}

"diretide_roshdeath_Stinger"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/halloween_stingers/DOTA_Rosh_Death_Music.mp3"

	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_low_priority"
				"track_priority" "1"	
			}
		}
	
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"**************REINCARNATE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Weapons"
			}
// 			"speakers_spatialize"
// 			{
// 				"input_radius"  "1000"
// 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"
			}
		}
	}
}


"DOTAMusic_Stinger.003"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_003.mp3"
}

"DOTAMusic_Stinger.004"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_004.mp3"
}
"DOTAMusic_Stinger.005"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_005.mp3"
}
"DOTAMusic_Stinger.006"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_006.mp3"
}

"DOTAMusic_Stinger.007"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_007.mp3"
}

"DOTAMusic_Stinger.008"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_008.mp3"
}

"DOTAMusic_Stinger.009"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DotA2_Music_Stinger_009.mp3"
}



"DOTAMusic_Stinger_Our_Radiant_Tower_Fallen"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"rndwave"
	{
	"wave"			"music\null.wav"
	}
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack"	"start_barracks_cooldown"
			"block_entries"
			{
				"input_duration" "15.0"
				"match_entry" "DOTAMusic_Stinger_Our_Radiant_Tower_Fallen"
			}
		}
	}
}

"DOTAMusic_Stinger_Our_Dire_Tower_Fallen"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack"	"start_barracks_cooldown"
			"block_entries"
			{
				"input_duration" "15.0"
				"match_entry" "DOTAMusic_Stinger_Our_Dire_Tower_Fallen"
			}
		}
	}
}

"DOTAMusic_Stinger_Their_Radiant_Tower_Fallen"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack"	"start_barracks_cooldown"
			"block_entries"
			{
				"input_duration" "15.0"
				"match_entry" "DOTAMusic_Stinger_Their_Radiant_Tower_Fallen"
			}
		}
	}
}

"DOTAMusic_Stinger_Their_Dire_Tower_Fallen"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack"	"start_barracks_cooldown"
			"block_entries"
			{
				"input_duration" "15.0"
				"match_entry" "DOTAMusic_Stinger_Their_Dire_Tower_Fallen"
			}
		}
	}
}


"DOTAMusic_barracks_fall_01"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null.wav"
}
"DOTAMusic_barracks_fall_02"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null.wav"
}
"DOTAMusic_barracks_fall_03"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null.wav"
}
"DOTAMusic_barracks_fall_04"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null.wav"
}
//BLOCKEND

"DOTAMusic_Victory_Radiant"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DOTA2_Music_Victory_Radiant_Comp.mp3"
	
	"soundentry_version" "2"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
				
			"add_music_value"
			{
				"input2" "1024" //Win
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
		}
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "1024" //Win
			}	
		}
	}
}

"DOTAMusic_Victory_Dire"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DOTA2_Music_Victory_Dire.mp3"
	
	"soundentry_version" "2"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
				
			"add_music_value"
			{
				"input2" "1024" //Win
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
		}
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "1024" //Win
			}	
		}
	}
}

"DOTAMusic_Defeat_Dire"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/DIRE_Lose.mp3"
	
	"soundentry_version" "2"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
				
			"add_music_value"
			{
				"input2" "2048" //Lose
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
		}
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2048" //Lose
			}	
		}
	}
}

"DOTAMusic_Defeat_Radiant"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/Radiant_Lose.mp3"
	
	"soundentry_version" "2"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
				
			"add_music_value"
			{
				"input2" "2048" //Lose
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
		}
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2048" //Lose
			}	
		}
	}
}

"DOTAMusic_Diretide_Finale"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/DOTA2_Music_Stinger_Ganked_01.wav"
	
	"soundentry_version" "2"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
				
			"add_music_value"
			{
				"input2" "2048" //Lose
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
		}
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2048" //Lose
			}	
		}
	}
}

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

"DOTAMusic_Hero.DeathMode"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"*#music\DOTA2_Music_Death.mp3"

	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "dead"
				"track_priority" "55"	
			}
		}
		
		"start_stack"
		{
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "16" //Dead
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************DEATH MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_death_music"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_fade_out"
			{
				"input_max" "4"
 			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"  
			}
						
			"block_entry_time_calc"
			{
				"operator" "math_float"
				"apply"	"add"
				"input1" "0.2"
				"input2" "@elapsed_time.output_sound_elapsed"
			}
			
			"block_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "@block_entry_time_calc.output" //in seconds, you can use "@get_random.output" for a random blocking period
				"match_substring" "true"
				"match_entry" "DOTAMusic_Hero.DeathMode" //The sound entry to use
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "16" //Dead, this values is pushed with the death stinger.
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************DEATH MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic.HeroPicker"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.5"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\hero_select_underscore_loop.wav"  
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{		
			"get_spectator_music_convar"
			{
				"operator" 	"get_convar"
				"convar"	"dota_music_enable_spectator_mode"
			}
			
			"get_current_spectator_status"
			{
				"operator" "get_opvar_float"
				"opvar" "music_is_spectator"
			}	
            
            "get_current_spectator_status_invert"
            {
                    "operator" "math_float"
                    "apply" "sub"   
                    "input1" "1.0"
                    "input2" "@get_current_spectator_status.output"
            }
			
			"check_play_spectator_music"  //Make sure the convar is set, AND we're in spectator mode
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@get_spectator_music_convar.output"
				"input2" "@get_current_spectator_status.output"
			}
			
			"check_play_music_not_spectator"  //OR we're not in spectatir mode
			{
				"operator" "math_float"
				"apply" "max"	
				"input1" "@check_play_spectator_music.output"
				"input2" "@get_current_spectator_status_invert.output"
			}
			
			"start_music_mainloop"
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				// "input_execute"	"@get_current_spectator_status_invert.output"
				"input_execute"	"@check_play_music_not_spectator.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.MainLoop" //Replace with the sound you want to play.
			}
			
			"import_stack" "dota_start_music_type_tracker"
							
			"set_music_type_opvar" //set the current music opvar
			{
				"input" "65536" //Hero Picker - doing this like this so we have a good baseline.
			}	
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"block_hero_picker_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "0.5"
				"match_substring" "false"
				"match_entry" "DOTAMusic.HeroPicker"
				"match_channel" "false"
				"match_entity" "false"
			}

			"volume_fade_out"
			{
				"input_max" "2"
 			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "65536" //Hero Picker
			}	
			
			"get_spectator_music_convar"
			{
				"operator" 	"get_convar"
				"convar"	"dota_music_enable_spectator_mode"
			}
			
			"get_current_spectator_status"
			{
				"operator" "get_opvar_float"
				"opvar" "music_is_spectator"
			}	
			
			"check_play_spectator_music"  //Make sure the convar is set, AND we're in spectator mode
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@get_spectator_music_convar.output"
				"input2" "@get_current_spectator_status.output"
			}
			
			"start_music_prehorn"
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				// "input_execute"	"@get_current_spectator_status_invert.output"
				"input_execute"	"@check_play_spectator_music.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.Prehorn" //Replace with the sound you want to play.
			}
		}
	}
}

"DOTAMusic.HeroPicker.INTERNATIONAL"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.8"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\hero_select_intl.wav"  
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{
			"start_music_mainloop"
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				"input_execute"	"1.0"
				"input_start" "1"
				"entry_name" "DOTAMusic.MainLoop" //Replace with the sound you want to play.
			}
			
			"import_stack" "dota_start_music_type_tracker"
							
			"set_music_type_opvar" //set the current music opvar
			{
				"input" "65536" //Hero Picker - doing this like this so we have a good baseline.
			}	
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}

			"volume_fade_out"
			{
				"input_max" "2"
 			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "65536" //Hero Picker
			}	
		}
	}
}

"DOTAMusic.Prehorn"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.75"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\DOTA2_Music_Prehorn.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4096" //Prehorn music
			}
			
			"set_prehorn_opvar"
			{
				"operator"	"set_opvar_float"
				"opvar"		"music_prehorn_playing"
				"input"		"1.0"
			}			
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_in"
			{
				"input_max" "5.0"
			}

			"volume_fade_out"
			{
				"input_max" "3.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"block_prehorn_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "0.5"
				"match_substring" "false"
				"match_entry" "DOTAMusic.Prehorn"
				"match_channel" "false"
				"match_entity" "false"
			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4096" //Prehorn
			}
			
			"set_prehorn_opvar"
			{
				"operator"	"set_opvar_float"
				"opvar"		"music_prehorn_playing"
				"input"		"0.0"
			}
		}
	}
}

"DOTAMusic.StopPrehorn" //oh god.
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav" 
	"operator_stacks"
	{		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			// "NOW_IN_SPECTATOR_STOP_PREHORN"
			// {
				// "operator" "util_print_float"
				// "input_execute" "@get_debug_printing_opvar.output"
				// "input"	"1.0"
			// }
			
			"stop_prehorn"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "false"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.Prehorn"
				"match_entity" "false"	
				"match_substring" "false"
			}			
		}
	}
}

"DOTAMusic.Explore01" //abstraction layer for explore music calls from code.
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav" 
	// "operator_stacks"
	// {
		
		// "start_stack"
		// {
			
			// "play_explore_picker_entry"
			// {
				// "operator" "sys_start_entry"
				// "execute_once" "false"
				// "input_execute"	"1.0"
				// "input_start" "1"
				// "entry_name" "DOTAMusic.StateExploreMusic" //Replace with the sound you want to play.
			// }
		// }
	// }
}


"DOTAMusic.StateExploreMusic"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.5"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{
			// "import_stack" "dota_random_delay_start"
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "131072" //Explore Picker
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}   
			
			"**************NOW_IN_EXPLORE_START_STACK**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
		}
		
		"update_stack"
		{
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}   
			
			"**************NOW_IN_EXPLORE_UPDATE_STACK**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_update_music_stereo"

			"speakers_limit"
			{				
				"input2[*]" "0.01"		
			}
		}
		
		"stop_stack"
		{
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}   
			
			"**************NOW_IN_EXPLORE_STOP_STACK**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"get_currently_playing_music_explore" //Keeping track of what music is playing at a given moment
			{
				"operator" "get_opvar_float"
				"opvar" "current_music"
			}
			
			"get_day_night_phase"
			{
				"operator" 	"get_opvar_float"
				"opvar" 	"music_is_daytime"
			}
		
			"other_music_playing_compare"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@get_currently_playing_music_explore.output"
				"input2" "131072"
			}
			
			"explore_day_variant"
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@get_day_night_phase.output"
				"input2" "1"			
			}
			
			"explore_night_variant"
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@get_day_night_phase.output"
				"input2" "0"			
			}
		
			"explore_day_night_variant_compare_day"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@other_music_playing_compare.output"
				"input2" "@explore_day_variant.output"
			}
		
			"explore_day_night_variant_compare_night"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@other_music_playing_compare.output"
				"input2" "@explore_night_variant.output"
			}
			
			"play_explore_entry_day"
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute"	"@explore_day_night_variant_compare_day.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.ExploreMusic_Picker_Day" //Replace with the sound you want to play.
			}
			
			"play_explore_entry_night"
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute"	"@explore_day_night_variant_compare_night.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.ExploreMusic_Picker_Night" //Replace with the sound you want to play.
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
		
			"other_music_playing_compare_and"  //make sure no other music is playing
			{
				"operator" "math_float"
				"apply" "min"	
				"input1" "@other_music_playing_compare.output"
				"input2" "@get_debug_printing_opvar.output"
			}
			
			"**************EXPLORE MUSIC PICKED**************" 
			{
				"input_execute"	"@other_music_playing_compare_and.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "131072" //Explore Picker
			}
		}
	}

}

"DOTAMusic.ExploreMusic_Picker_Day"
{
	"channel"	 "CHAN_STATIC"
	"volume"	 "0.1"
	"soundlevel" "SNDLVL_NONE"
	// "pitch"		 "PITCH_NORM"

	"wave"  "music\null.wav"	


	"soundentry_version" "2"
	"operator_stacks"
	{
		"start_stack"
		{	
		
			// "tutorial_check_01"
			// {
				// "input_execute" "1.0" //enable map checking here
				// "operator" "get_map_name"
				// "map_name" "tutorial" //your map name here	
				// "match_substring" "true"
			// }		 
			
			"import_stack" "CS_random_music_entry_start_2"	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************EXPLORE MUSIC PICKER STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"get_no_repeat_opvar" 
			{
				"opvar" "dota_music_explore_no_repeat"
			}
			
			"random_variation_picker" //use for random volume if needed
			{
				"input_min" "@get_no_repeat_opvar.output_opvar_exists"	
				"input_max" "2.0"	//high value here.	
			}
		
			"identity_for_comparing" //using this like a variable, since we have no variables atm.
			{		
				"input1" "@mod_added_num.output"
			}
			 
			// "play_variation_1"
			// {
				// "entry_name" "DOTAMusic.LaningMusic_01"
			// }
			
			// "play_variation_2"
			// {
				// "entry_name" "DOTAMusic.ExploreMusic_02"
			// }
			 
			"play_variation_1"
			{
				"entry_name" "DOTAMusic.LaningMusicTutorial_01"
			}
			
			"play_variation_2"
			{
				"entry_name" "DOTAMusic.ExploreMusicTutorial_01"
			}
			
			"play_variation_3"
			{
				"entry_name" "DOTAMusic.LaningMusicTutorial_02" 
			}
			
			"set_no_repeat_opvar"
			{
				"opvar" "dota_music_explore_no_repeat"
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Picker_Night"
{
	"channel"	 "CHAN_STATIC"
	"volume"	 "0.1"
	"soundlevel" "SNDLVL_NONE"
	// "pitch"		 "PITCH_NORM"

	"wave"  "music\null.wav"	


	"soundentry_version" "2"
	"operator_stacks"
	{
		"start_stack"
		{
			
			"import_stack" "CS_random_music_entry_start_2"	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************EXPLORE MUSIC PICKER STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"get_no_repeat_opvar" 
			{
				"opvar" "dota_music_explore_night_no_repeat"
			}
			
			"random_variation_picker" //use for random volume if needed
			{
				"input_min" "@get_no_repeat_opvar.output_opvar_exists"	
				"input_max" "2.0"	//high value here.	
			}
		
			"identity_for_comparing" //using this like a variable, since we have no variables atm.
			{		
				"input1" "@mod_added_num.output"
			}
			 
			// "play_variation_1"
			// {
				// "entry_name" "DOTAMusic.LaningMusic_01"
			// }
			
			// "play_variation_2"
			// {
				// "entry_name" "DOTAMusic.ExploreMusic_02"
			// }
			 
			"play_variation_1"
			{
				"entry_name" "DOTAMusic.LaningMusicTutorial_01"
			}
			
			"play_variation_2"
			{
				"entry_name" "DOTAMusic.ExploreMusicTutorial_01"
			}
			
			 "play_variation_3"
			 {
				 "entry_name" "DOTAMusic.LaningMusicTutorial_02" 
			 }
			
			"set_no_repeat_opvar"
			{
				"opvar" "dota_music_explore_night_no_repeat"
			}
		}
	}
}

"DOTAMusic.ExploreMusic_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001.mp3" 
	// "wave"			"test\beep.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		
			"import_stack" "dota_random_delay_start"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "30.0"	
			}
		}

		"update_stack"
		{
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************EXPLORE MUSIC STARTED**************" 
			{
				"execute_once" "true"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
				
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
			
			// "volume_fade_out"
			// {
				// "input_max" "2"
 			// }
			
			// "stoptime_elapsed_blocking_trigger"
			// {
				// "operator" "math_float"
				// "apply" "equals"	
				// "input1" "@volume_invert_fadeout.output"
				// "input2" "1.0" 
			// }
						
			// "block_entry_time_calc"
			// {
				// "operator" "math_float"
				// "apply"	"add"
				// "input1" "0.1"
				// "input2" "@elapsed_time.output_entry_elapsed"
			// }
			
			// "block_entries"
			// {
				// "operator" "sys_block_entries"
				// "input_active" "1.0"	
				// "input_execute" "@stoptime_elapsed_blocking_trigger.output"
				// "input_duration" "@block_entry_time_calc.output" //in seconds
				// "match_substring" "false"
				// "match_entry" "DOTAMusic.ExploreMusic_01" //The sound entry to use
				// "match_channel" "false"
				// "match_entity" "false"
			// }	
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************EXPLORE MUSIC KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

//BLOCKSTART //LAYERED EXPLORE MUSIC 02
////////////////////////////////////////////////////////////////////////
// LAYERED EXPLORE MUSIC ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

"DOTAMusic.ExploreMusic_02" //Layered explore music master
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.05"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"prestart_stack" 
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		}
		
		"start_stack"
		{
			
			"import_stack" "dota_random_delay_start"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "30.0"	
			}
			
			"set_explore_delay_opvar"
			{
				"operator" 	"set_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
				"input"		"@get_random_delay.output"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"import_stack" "dota_update_start_3layer"
			
			"layer1"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt1"
			}
			
			"layer2"
			{	
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusic_Layered_001_Layer02_pt1"
			}
			
			"layer3"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusic_Layered_001_Layer03_pt1"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
		}
		
		"stop_stack"
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************EXPLORE MUSIC KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_4layer"
			
			"4layer_stop"
			{
				"match_entry" "DOTAMusic.ExploreMusic_Layered"
			}
			
			"4layer_stop_self"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "true"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusic"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer01_pt1"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer01_pt1.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.100"
				"end_point" "25.962"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.322"
						"2" "25.962"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt2"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer01_pt2"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer01_pt2.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.322"
				"end_point" "25.564"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.322"
						"2" "25.564"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer01_pt3"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer01_pt3.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.300"
				"end_point" "26.755"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.300"
						"2" "26.755"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt4"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer01_pt4"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer01_pt4.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.375"
				"end_point" "22.069"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.375"
						"2" "22.069"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_03"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer02_pt1"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer02_pt1.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.100"
				"end_point" "17.100"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.100"
						"2" "17.100"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}	
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer02_pt2"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer02_pt2"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer02_pt2.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.500"
				"end_point" "22.000"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.500"
						"2" "22.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer02_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer02_pt3"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer02_pt3.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.234"
				"end_point" "29.255"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.234"
						"2" "29.255"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer02_pt4"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer02_pt4"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer02_pt4.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.500"
				"end_point" "33.040"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.500"
						"2" "33.040"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt3"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop_self" //Putting this here because part 2 is the longest.
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusic"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer03_pt1"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer03_pt1.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "26.282"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "26.282"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer03_pt2"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer03_pt2"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer03_pt2.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "30.000"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "30.000" 
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"						
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer03_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer03_pt3"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer03_pt3.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "30.000"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "30.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"							
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer03_pt4"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_001_Layer03_pt4"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_001_Layer03_pt4.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "18.115"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "18.115"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"								
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}
//BLOCKEND

//BLOCKSTART //LAYERED EXPLORE MUSIC 03
"DOTAMusic.ExploreMusic_03" //Layered explore music master
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.05"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"prestart_stack" 
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		}
		
		"start_stack"
		{
			
			"import_stack" "dota_random_delay_start"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "30.0"	
			}
			
			"set_explore_delay_opvar"
			{
				"operator" 	"set_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
				"input"		"@get_random_delay.output"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"import_stack" "dota_update_start_3layer"
			
			"layer1"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusic_Layered_002_Layer01_pt1"
			}
			
			"layer2"
			{	
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt1"
			}
			
			"layer3"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusic_Layered_002_Layer03_pt1"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
		}
		
		"stop_stack"
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************EXPLORE MUSIC KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_4layer"
			
			"4layer_stop"
			{
				"match_entry" "DOTAMusic.ExploreMusic_Layered"
			}
			
			"4layer_stop_self"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "true"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusic"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer01_pt1"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer01_pt1.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "30.000"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "30.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer01_pt2"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer01_pt2"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer01_pt2.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "30.000"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "30.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer01_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer01_pt3"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer01_pt3.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "30.000"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "30.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer01_pt4"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer01_pt4"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer01_pt4.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "22.142"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "22.142"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_03"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer02_pt1"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer02_pt1.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "25.000"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "25.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}	
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt2"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer02_pt2"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer02_pt2.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "25.000"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "25.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer02_pt3"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer02_pt3.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "25.000"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "25.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt4"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer02_pt4"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer02_pt4.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "25.000"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "25.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt5"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer02_pt5"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Explore_002_Layer02_pt5.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "12.192"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "12.192"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
			//	"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt5"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop_self" //Putting this here because part 2 is the longest.
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusic"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer03_pt1"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "26.282"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "26.282"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer03_pt2"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer03_pt2"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "30.000"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "30.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"						
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer03_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer03_pt3"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "30.000"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "30.000"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"							
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer03_pt4"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.ExploreMusic_Layered_002_Layer03_pt4"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.000"
				"end_point" "18.115"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.000"
						"2" "18.115"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.2"	
				"input_Y2" "0.0"	
				"input_X3" "0.67"	
				"input_Y3" "0.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"								
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_001_Layer01_pt3"
				"stop_channel_on_track" "false"	
			}
		}
	}
}
//BLOCKEND

//BLOCKSTART //LANING MUSIC 01
"DOTAMusic.LaningMusic_01" //Laning 01 music master
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.05"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"prestart_stack" 
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		}
		
		"start_stack"
		{
			
			"import_stack" "dota_random_delay_start"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "30.0"	
			}
			
			"set_explore_delay_opvar"
			{
				"operator" 	"set_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
				"input"		"@get_random_delay.output"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"import_stack" "dota_update_start_3layer"
			
			//UNCOMMENT THIS TO TURN ON LANING MUSIC WIP -df
			
			"layer1"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusic_01_Layer_01_pt_01"
			}
			
			"layer2"
			{	
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusic_01_Layer_02_pt_01"
			}
			
			"layer3"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusic_01_Layer_03_pt_01"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
		}
		
		"stop_stack"
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING_MUSIC_KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_4layer"
			
			"4layer_stop"
			{
				"match_entry" "DOTAMusic.LaningMusic_01_Layer"
			}
			
			"4layer_stop_self"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "true"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusic"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_01_pt_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.85"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_01_pt_01.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "34.31168021"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "34.31168021"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			
			"volume_fade_out"
			{
				"input_max" "0.704571675"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.8"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_01_pt_02"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_01_pt_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.85"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_01_pt_02.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.704571675"
				"end_point" "34.96700813"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.704571675"
						"2" "34.96700813"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.704571675"
			}
			
			"volume_fade_out"
			{
				"input_max" "1.092961458"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.8"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_01_pt_03"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_01_pt_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.85"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_01_pt_03.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.092961458"
				"end_point" "28.94441697"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.092961458"
						"2" "28.94441697"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.092961458"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.415410041"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.8"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_01_pt_04"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_01_pt_04"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.85"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_01_pt_04.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.415410041"
				"end_point" "29.61221287"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.415410041"
						"2" "29.61221287"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.415410041"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.426544792"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.8"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_01_pt_05"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_01_pt_05"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.85"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_01_pt_05.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.426544792"
				"end_point" "36.54330833"
				"track_name" "explore"
				"sync_track_name" "explore"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.426544792"
						"2" "36.54330833"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.426544792"
			}
			
			"volume_fade_out"
			{
				"input_max" "1"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.8"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_03"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
		
			"get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
			{
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING MUSIC_01_part_05 KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusic_01"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusic_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}		
	}
}

"DOTAMusic.LaningMusic_01_Layer_02_pt_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_02_pt_01.wav"
	
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "36.12848542"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "36.12848542"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.0"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.368950553"
 			}	
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_02_pt_02"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_02_pt_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_02_pt_02.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.368950553"
				"end_point" "28.38501514"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.368950553"
						"2" "28.38501514"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.368950553"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.6144625"
 			}	
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_02_pt_03"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_02_pt_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_02_pt_03.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.6144625"
				"end_point" "32.27787396"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.6144625"
						"2" "32.27787396"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.6144625"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.384067958"
 			}	
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_02_pt_04"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_02_pt_04"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_02_pt_04.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.384067958"
				"end_point" "27.61694712"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.384067958"
						"2" "27.61694712"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.384067958"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.469997917"
 			}	
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_02_pt_05"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_02_pt_05"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_02_pt_05.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.469997917"
				"end_point" "39.16829479"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.469997917"
						"2" "39.16829479"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.469997917"
			}
			
			"volume_fade_out"
			{
				"input_max" "1"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"update_track"
			{
				"operator" "track_update"
			//	"autoqueue_entry_at_end_point" "DOTAMusic.ExploreMusic_Layered_002_Layer02_pt5"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
		
			"get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
			{
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING MUSIC_01_part_05 KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusic_01"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusic_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusic_01_Layer_03_pt_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_03_pt_01.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.000"
				"end_point" "28.99534687"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "28.99534687"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.5"
			}
			
			"volume_fade_out"
			{
				"input_max" "0.496805009"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.05"	
				"input_X2" "0.2"	
				"input_Y2" "0.05"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_03_pt_02"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_03_pt_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_03_pt_02.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.496805009"
				"end_point" "33.5824302"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.496805009"
						"2" "33.5824302"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.496805009"
			}
			
			"volume_fade_out"
			{
				"input_max" "1.638048743"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.05"	
				"input_X2" "0.2"	
				"input_Y2" "0.05"	
				"input_X3" "0.67"		
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_03_pt_03"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_03_pt_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_03_pt_03.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.638048743"
				"end_point" "30.63357198"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.638048743"
						"2" "30.63357198"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.638048743"
			}
			
			"volume_fade_out"
			{
				"input_max" "1.184302583"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.05"	
				"input_X2" "0.2"	
				"input_Y2" "0.05"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_03_pt_04"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_03_pt_04"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_03_pt_04.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.184302583"
				"end_point" "16.73991979"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.184"
						"2" "16.739"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.5"
			}
			
			"volume_fade_out"
			{
				"input_max" "1"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.05"	
				"input_X2" "0.2"	
				"input_Y2" "0.05"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_03_pt_05"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_03_pt_05"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_03_pt_05.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.707786458"
				"end_point" "31.58341042"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.708"
						"2" "31.583"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "0.707786458"
			}
			
			"volume_fade_out"
			{
				"input_max" "1.275704167"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.05"	
				"input_X2" "0.2"	
				"input_Y2" "0.05"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_03_pt_06"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

"DOTAMusic.LaningMusic_01_Layer_03_pt_06"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Laning_01_Layer_03_pt_06.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.275704167"
				"end_point" "25.50710625"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.275704167"
						"2" "25.50710625"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_in"
			{
				"input_max" "1.275704167"
			}
			
			"volume_fade_out"
			{
				"input_max" "1"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.05"	
				"input_X2" "0.2"	
				"input_Y2" "0.05"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"update_track"
			{
				"operator" "track_update"
				//"autoqueue_entry_at_end_point" "DOTAMusic.LaningMusic_01_Layer_03_pt_05"
				"stop_channel_on_track" "false"	
			}
		}
	}
}

//BLOCKEND

//BLOCKSTART //LANING MUSIC TUTORIAL

"DOTAMusic.LaningMusicTutorial_01" //Laning 01 music master
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.05"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"prestart_stack" 
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		}
		
		"start_stack"
		{
			
			// "import_stack" "dota_random_delay_start"
			
			// "get_random_delay"
			// {
				// "input_min" "10.0"
				// "input_max" "20.0"	
			// }
			
			// "tutorial_opvar_check_01"
			// {
				// "input_execute" "1.0" //enable map checking here
			// }	
		
			// "get_random_delay_tutorial"
			// {	
				// "input_min" "3.0"
				// "input_max" "5.0"	
			// }
			
			// "set_explore_delay_opvar"
			// {
				// "operator" 	"set_opvar_float"
				// "opvar" 	"laning_01_random_delay_opvar"
				// "input"		"@tutorial_opvar_switch.output"
			// }
			
	            // "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
	            // {
				// "operator" "get_opvar_float"
				// "opvar" "debug_print_music"
			// }
			
			// "**************TUTORIAL_OPVAR_CHECK**************" 
			// {
				// "input_execute"	"@get_debug_printing_opvar.output"
				// "operator" "util_print_float"
				// "input" "@tutorial_opvar_check_01.output"
			// }
			// "**************LANING_MUSIC_DELAY**************" 
			// {
				// "input_execute"	"@get_debug_printing_opvar.output"
				// "operator" "util_print_float"
				// "input" "@tutorial_opvar_switch.output"
			// }
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"import_stack" "dota_update_start_3layer_delay"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "20.0"	
			}
			
			"tutorial_opvar_check_01"
			{
				"input_execute" "1.0" //enable map checking here
			}	
		
			"get_random_delay_tutorial"
			{	
				"input_min" "3.0"
				"input_max" "5.0"	
			}
			
			"layer1"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusicTutorial_01_Layer_01"
			}
			
			"layer2"
			{	
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusicTutorial_01_Layer_02"
			}
			
			"layer3"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusicTutorial_01_Layer_03"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
		}
		
		"stop_stack"
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING_MUSIC_KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_4layer"
			
			"4layer_stop"
			{
				"match_entry" "DOTAMusic.LaningMusicTutorial_01_Layer"
			}
			
			"4layer_stop_self"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "true"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.LaningMusicTutorial_01_Layer_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Tutorial_Music_Laning_01_Layer_01.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore1"
				"sync_track_name" "explore1"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.5"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_01_Layer_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Tutorial_Music_Laning_01_Layer_02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.25"	
				"input_Y2" "1.0"	
				"input_X3" "0.25"	
				"input_Y3" "1.0"	
				"input_X4" "0.25"	
				"input_Y4" "1.0"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_01_Layer_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Tutorial_Music_Laning_01_Layer_03.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_01_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.1"	
				"input_X2" "0.2"	
				"input_Y2" "0.1"	
				"input_X3" "0.6"	
				"input_Y3" "0.3"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_02" //Laning 01 music master
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.05"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"prestart_stack" 
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		}
		
		"start_stack"
		{
			
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"import_stack" "dota_update_start_3layer_delay"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "20.0"	
			}
			
			"tutorial_opvar_check_01"
			{
				"input_execute" "1.0" //enable map checking here
			}	
		
			"get_random_delay_tutorial"
			{	
				"input_min" "3.0"
				"input_max" "5.0"	
			}
			
			"layer1"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusicTutorial_02_Layer_01"
			}
			
			"layer2"
			{	
				"execute_once" "true"
				"entry_name" "DOTAMusic.LaningMusicTutorial_02_Layer_02"
			}
			
			//"layer3"
			//{
			//	"execute_once" "true"
			//	"entry_name" "DOTAMusic.LaningMusicTutorial_01_Layer_03"
			//}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
		}
		
		"stop_stack"
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING_MUSIC_KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_4layer"
			
			"4layer_stop"
			{
				"match_entry" "DOTAMusic.LaningMusicTutorial_02_Layer"
			}
			
			"4layer_stop_self"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "true"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.LaningMusicTutorial_02_Layer_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA_Laning_02_Music_layer01.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore1"
				"sync_track_name" "explore1"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_02_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.5"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_02"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

"DOTAMusic.LaningMusicTutorial_02_Layer_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA_Laning_02_Music_layer02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"laning_02_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.25"	
				"input_Y2" "1.0"	
				"input_X3" "0.25"	
				"input_Y3" "1.0"	
				"input_X4" "0.25"	
				"input_Y4" "1.0"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.LaningMusicTutorial_02"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}	
	}
}

//BLOCKEND

//BLOCKSTART //EXPLORE MUSIC TUTORIAL

"DOTAMusic.ExploreMusicTutorial_01" //Laning 01 music master
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.05"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "1"	
			}
		}
		
		"prestart_stack" 
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "2" //Explore
			}
		}
		
		"start_stack"
		{
			
			// "import_stack" "dota_random_delay_start"
			
			// "get_random_delay"
			// {
				// "input_min" "10.0"
				// "input_max" "20.0"	
			// }
			
			// "tutorial_opvar_check_01"
			// {
				// "input_execute" "1.0" //enable map checking here
			// }
		
			// "get_random_delay_tutorial"
			// {	
				// "input_min" "3.0"
				// "input_max" "5.0"	
			// }
			
			// "set_explore_delay_opvar"
			// {
				// "operator" 	"set_opvar_float"
				// "opvar" 	"explore_random_delay_opvar"
				// "input"		"@tutorial_opvar_switch.output"
			// }
			
            // "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            // {
				// "operator" "get_opvar_float"
				// "opvar" "debug_print_music"
			// }
			
			// "**************TUTORIAL_OPVAR_CHECK**************" 
			// {
				// "input_execute"	"@get_debug_printing_opvar.output"
				// "operator" "util_print_float"
				// "input" "@tutorial_opvar_check_01.output"
			// }
			
			// "**************EXPLORE_MUSIC_DELAY**************" 
			// {
				// "input_execute"	"@get_debug_printing_opvar.output"
				// "operator" "util_print_float"
				// "input" "@tutorial_opvar_switch.output"
			// }
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"import_stack" "dota_update_start_3layer_delay"
			
			"get_random_delay"
			{
				"input_min" "10.0"
				"input_max" "20.0"	
			}
			
			"tutorial_opvar_check_01"
			{
				"input_execute" "1.0" //enable map checking here
			}	
		
			"get_random_delay_tutorial"
			{	
				"input_min" "3.0"
				"input_max" "5.0"	
			}
			
			"layer1"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusicTutorial_01_Layer_01"
			}
			
			"layer2"
			{	
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusicTutorial_01_Layer_02"
			}
			
			"layer3"
			{
				"execute_once" "true"
				"entry_name" "DOTAMusic.ExploreMusicTutorial_01_Layer_03"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "false"	//this is OK explore music is working 
			}
		}
		
		"stop_stack"
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "2" //Explore
			}	
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING_MUSIC_KILLED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"import_stack" "dota_stop_4layer"
			
			"4layer_stop"
			{
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01_Layer"
			}
			
			"4layer_stop_self"
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"stop_this_entry" "true"	
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
		}
	}
}

"DOTAMusic.ExploreMusicTutorial_01_Layer_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Tutorial_Music_Explore_001_Layer01.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore1"
				"sync_track_name" "explore1"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************LANING_MUSIC_STARTED**************" 
			{
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "1.0"	
				"input_X2" "0.2"	
				"input_Y2" "1.0"	
				"input_X3" "0.67"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "0.5"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}
	}
}

"DOTAMusic.ExploreMusicTutorial_01_Layer_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Tutorial_Music_Explore_001_Layer02.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore2"
				"sync_track_name" "explore2"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "0.33"	
				"input_Y2" "1.0"	
				"input_X3" "0.33"	
				"input_Y3" "1.0"	
				"input_X4" "0.33"	
				"input_Y4" "1.0"	
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}
	}
}

"DOTAMusic.ExploreMusicTutorial_01_Layer_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Tutorial_Music_Explore_001_Layer03.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0"
				"end_point" "161.802"
				"track_name" "explore3"
				"sync_track_name" "explore3"
				"track_priority" "1"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.000"
						"2" "161.802"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_random_delay_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" 	"explore_random_delay_opvar"
			}
		
			"explore_music_delay_output"
			{
				"operator" "sys_output"
				"input_float" "@get_random_delay_opvar.output" //delays the start of a sound by a random amount
				"output" "delay"
			}
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_update_music_4layer"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "2"
 			}
			
			"intensity_to_vol_remap"
			{
				"input_X1" "0.0"	
				"input_Y1" "0.1"	
				"input_X2" "0.2"	
				"input_Y2" "0.1"	
				"input_X3" "0.6"	
				"input_Y3" "0.3"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"				
			}
			
			"speakers_limit"	
			{
				"input2[*]" "@speaker_volume.output"		
			}
			
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "false"	
			}
		}
		
		"stop_stack"
		{
			"4layer_stop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial"
				"match_entity" "false"	
				"match_substring" "true"
			}
			
			"4layer_stop_loop" 
			{
				"operator" "sys_stop_entries"
				"input_execute" "1.0"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entry" "DOTAMusic.ExploreMusicTutorial_01"
				"match_entity" "false"	
				"match_substring" "false"
			}
		}
	}
}

//BLOCKEND

"DOTAMusic.BattleMusic_Epic" //Battle music request from the game
{
	"channel"	 "CHAN_STATIC"
	"volume"	 "0.60" 
	"soundlevel" "SNDLVL_NONE"
	// "pitch"		 "PITCH_NORM"

	"wave"  "music\null.wav"


	"soundentry_version" "2"
	"operator_stacks"
	{
		"start_stack"
		{
			"set_battle_request_opvar"
			{
				"operator" "set_opvar_float"
				"opvar" "state_battle_music_request"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic.StateBattleMusic"
{
	"channel"	 "CHAN_STATIC"
	"volume"	 "0.60"
	"soundlevel" "SNDLVL_NONE"
	"wave"  "music\null.wav"
	
	"soundentry_version" "2"
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_battle_epic_entry" //play explore music
			{
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_execute"	"@music_playing_and.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.BattleMusic_Epic_Picker" //Replace with the sound you want to play.
			}
		}
	}
}
	
"DOTAMusic.BattleMusic_Epic_Picker"
{
	"channel"	 "CHAN_STATIC"
	"volume"	 "0.60"
	"soundlevel" "SNDLVL_NONE"
	// "pitch"		 "PITCH_NORM"

	"wave"  "music\null.wav"	


	"soundentry_version" "2"
	"operator_stacks"
	{
		"start_stack"
		{
			
			"import_stack" "CS_random_music_entry_start_2"	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC PICKER STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"get_no_repeat_opvar" 
			{
				"opvar" "dota_music_epic_no_repeat"
			}
			
			"random_variation_picker" //use for random volume if needed
			{
				"input_min" "@get_no_repeat_opvar.output_opvar_exists"	
			}
		
			"identity_for_comparing" //using this like a variable, since we have no variables atm.
			{		
				"input1" "@mod_added_num.output"
			}
			 
			"play_variation_1"
			{
				"entry_name" "DOTAMusic.BattleMusic_Epic_01" 
			}
			
			"play_variation_2"
			{
				"entry_name" "DOTAMusic.BattleMusic_Epic_02" 
			}
			
			"play_variation_3"
			{
				"entry_name" "DOTAMusic.BattleMusic_Epic_03" 
			}
			
			"set_no_repeat_opvar"
			{
				"opvar" "dota_music_epic_no_repeat"
			}
			
			"set_battle_choice_opvar"
			{
				"operator" "set_opvar_float"
				"opvar" "dota_battle_music_choice"
				"input" "@identity_for_comparing.output"
			}
			
			// "block_entries"
			// {
				// "operator" "sys_block_entries"
				// "input_active" "1.0"	
				// "input_duration" "1.0"
				// "match_substring" "false"
				// "match_entry" "DOTAMusic.BattleMusic_Epic_Picker"
				// "match_channel" "false"
				// "match_entity" "false"
			// }
		}
	}
}

"DOTAMusic.BattleMusic_Epic_End"
{
	"channel"	 "CHAN_STATIC"
	"volume"	 "0.60"
	"soundlevel" "SNDLVL_NONE"
	// "pitch"		 "PITCH_NORM"

	"wave"  "music\null.wav"	


	"soundentry_version" "2"
	"operator_stacks"
	{
		"start_stack"
		{
			"get_battle_choice_opvar"
			{
				"operator" "get_opvar_float"
				"opvar" "dota_battle_music_choice"
			}	
			
			"import_stack" "CS_random_music_entry_start_2"
			
					
			"random_variation_picker" //use for random volume if needed
			{
				"input_execute" "0.0"
			}
		
			"compare_1"
			{			
				"input1" "@get_battle_choice_opvar.output"
			}
		
			"compare_2"
			{			
				"input1" "@get_battle_choice_opvar.output"
			}
		
			"compare_3"
			{			
				"input1" "@get_battle_choice_opvar.output"
			}	
			
			"play_variation_1"
			{
				"entry_name" "DOTAMusic.BattleMusic_Epic_End_01" 
			}
			
			"play_variation_2"
			{
				"entry_name" "DOTAMusic.BattleMusic_Epic_End_02" 
			}
			
			"play_variation_3"
			{
				"entry_name" "DOTAMusic.BattleMusic_Epic_End_03" 
			}
			
			// "block_entries"
			// {
				// "operator" "sys_block_entries"
				// "input_active" "1.0"	
				// "input_duration" "1.0"
				// "match_substring" "false"
				// "match_entry" "DOTAMusic.BattleMusic_Epic_End"
				// "match_channel" "false"
				// "match_entity" "false"
			// }
		}
	}
}

"DOTAMusic.BattleMusic_Epic_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_001.mp3"
	
	"soundentry_version" "2"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.118"
				"end_point" "36.89"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
						"2"	"5.59"
						"3"	"10.062"
						"4"	"14.534"
						"5" "19.006"
						"6"	"23.478"
						"7"	"27.95"
						"8"	"32.422"
						"9" "36.89"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_01"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic.BattleMusic_Epic_End_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_001_End.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.118"
				"end_point" "5.59"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
						"2"	"5.59"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack"	"dota_spectator_flag_set"
			
			"set_spectator_flag_opar"
			{
				"input"		"0.0"				
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"battle_music_stop" //brute forcing this shit cuz we can still get two effing battle musics WTF?!
			{
				"execute_once" "true"
				"input_execute"	"1.0"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Epic_0" //Stop the smoke music if you attack a creep.	
			}
		}
	}
}

"DOTAMusic.BattleMusic_Epic_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_002.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.173"
				"end_point" "43.845"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.173"
						"2"	"3.84"
						"3"	"6.507"
						"4"	"9.174"
						"5" "11.841"
						"6"	"14.508"
						"7"	"17.175"
						"8"	"19.842"
						"9" "22.509"
						"10" "25.176"
						"11" "27.843"
						"12" "30.51"
						"13" "33.177"
						"14" "35.844"
						"15" "38.511"
						"16" "41.178"
						"17" "43.845"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}		
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_02"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic.BattleMusic_Epic_End_02"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_002_End.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.173"
				"end_point" "9.304"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.173"
						"2"	"9.304"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack"	"dota_spectator_flag_set"
			
			"set_spectator_flag_opar"
			{
				"input"		"0.0"				
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"battle_music_stop" //brute forcing this shit cuz we can still get two effing battle musics WTF?!
			{
				"execute_once" "true"
				"input_execute"	"1.0"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Epic_0" //Stop the smoke music if you attack a creep.	
			}
		}
	}
}

"DOTAMusic.BattleMusic_Epic_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\In_The_MOud.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" ".65"
				"end_point" "72.638"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" ".65"
						"2"	"4.078"
						"3"	"7.506"
						"4"	"10.934"
						"5" "14.362"
						"6"	"17.79"
						"7"	"21.218"
						"8"	"24.646"
						"9" "28.074"
						"10" "31.502"
						"11" "34.93"
						"12" "38.358"
						"13" "41.786"
						"14" "45.214"
						"15" "48.462"
						"16" "52.07"
						"17" "55.498"
						"18" "58.926"
						"19" "62.354"
						"20" "65.782"
						"21" "69.21"
						"22" "72.638"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_03"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

"DOTAMusic.BattleMusic_Epic_End_03"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\In_The_MOud_end.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" ".645"
				"end_point" "9.0"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" ".645"
						"2"	"9.0"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack"	"dota_spectator_flag_set"
			
			"set_spectator_flag_opar"
			{
				"input"		"0.0"				
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"battle_music_stop" //brute forcing this shit cuz we can still get two effing battle musics WTF?!
			{
				"execute_once" "true"
				"input_execute"	"1.0"	
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic_Epic_0" //Stop the smoke music if you attack a creep.	
			}
		}
	}
}

"DOTAMusic.BattleMusic_Epic_End_PreHorn"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_001_End.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "1.118"
				"end_point" "5.59"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "47"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
						"2"	"5.59"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
		}
	}
}

"DOTAMusic.StateRoshanMusic"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_roshan_battlemusic_entry" //play 
			{
				"input_execute"	"@music_playing_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.BattleMusic_Roshan_01" //Replace with the sound you want to play.
			}	
			
		}
	}
}

"DOTAMusic.BattleMusic_Roshan_01"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.7"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_004.mp3"
	
	"soundentry_version" "2"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "42.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "40"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.5"
						"2"	"4.0"
						"3"	"7.5"
						"4"	"11.0"
						"5" "14.5"
						"6"	"18.0"
						"7"	"21.5"
						"8"	"25.0"
						"9" "28.5"
						"10"	"32.0"
						"11"	"35.5"
						"12"	"39.0"
						"13"	"42.5"						
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "128" //Roshan
			}	
		}
		
		"update_stack"
		{
			
			"import_stack" "dota_opvar_smoothing_update"
			
			"get_live_value_opvar" //Get the current from-the-game battle score
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_health_state" //replace me
			}
			
			"get_smooth_value_opvar" //get our smoothed version of the battle score
			{
				"operator" "get_opvar_float"
				"opvar" "music_roshan_health_state_smooth" //replace me
			}	
			
			"get_attack_value_opvar"
			{	
				"operator" 	"get_opvar_float"
				"opvar" 	"music_roshan_attack_state"			
			}
			
			"remap_travel_distance_to_time"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "5.0"	
				"input_Y2" "2.0"	
				"input_X3" "8.0"	
				"input_Y3" "2.0"	
				"input_X4" "10.0"	
				"input_Y4" "4.0"	
			}
			
			"remap_travel_distance_to_time_falling"
			{
				"input_X1" "0.1"	
				"input_Y1" "0.1"	
				"input_X2" "5.0"	
				"input_Y2" "2.0"	
				"input_X3" "8.0"	
				"input_Y3" "2.0"	
				"input_X4" "10.0"	
				"input_Y4" "4.0"	
			}	
			
			"set_opvar"
			{
				"opvar" "music_roshan_health_state_smooth"
			}
		
			"remap_health_to_vol" //health is 0-100
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@opvar_value_ramp.output"
				"input_X1" "15.0"	
				"input_Y1" "1.0"	
				"input_X2" "25.0"	
				"input_Y2" "0.9"	
				"input_X3" "95.0"	
				"input_Y3" "0.35"	
				"input_X4" "100.0"	
				"input_Y4" "0.1"	
			}
			
			"fadetime_compare" //use shorter fadetime if Roshan is dead
			{
				"operator" "math_float"
				"apply" "equals"	
				"input1" "@get_attack_value_opvar.output"
				"input2" "2.0" 
			}
			
			"fadetime_short"
			{
				"operator" "math_float"
				"apply" "mult"	
				"input1" "1.0"
				"input2" "0.5" 
			}
			
			"fadetime_long"
			{
				"operator" "math_float"
				"apply" "mult"	
				"input1" "3.0"
				"input2" "1.0" 
			}
		
			"fadetime_logic_switch"
			{
				"operator" "math_logic_switch" 
				"input1" "@fadetime_long.output"
				"input2" "@fadetime_short.output"
				"input_switch" "@opvar_smoothing_difference_compare.output"
			}
			
			"import_stack" "dota_update_music_stereo"
			
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "@fadetime_logic_switch.output"
 			}
			
			"external_scaler"
			{
				"operator" "math_float"
				"apply" "mult"	
				"input2" "@remap_health_to_vol.output"
			}

			"speakers_limit"
			{
				"input2[*]" "@external_scaler.output"
			}
			
			// "speakers_output"
			// {
				// "input_speakers" "0.5"
			// }
				
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Roshan_01"
				"stop_channel_on_track" "true"	
			}
			
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "128" //Roshan
			}	
		}
	}
}

"DOTAMusic.StateRoshanKilled"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_roshan_battlemusic_end_entry" //play 
			{
				"input_execute"	"@music_playing_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.BattleMusic_Roshan_End" //Replace with the sound you want to play.
			}	
		}
	}
}

"DOTAMusic.BattleMusic_Roshan_End"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Battle_004_End.mp3"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "2.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "42"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0.5"
						"2"	"2.5"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"update_stack"
		{
			//Don't play the generic stinger if you play the "killed" stinger.
			"input_execute"	"1.0"	
			"operator" "sys_stop_entries"
			"input_max_entries" "0.000000" //zero!  ah ah ah!
			"match_entity" "false"	
			"match_substring" "true"
			"match_entry" "DOTAMusic_Stinger.009" //The generic roshan stinger.  don't play it.
	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "0.0"
				"input2" "0.0" 
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}

"DOTAMusic.StateSmokePopped"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_smoke_popped_entry" //play 
			{
				"input_execute"	"@music_playing_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.SmokePopped" //Replace with the sound you want to play.
			}				
		}
	}
}

"DOTAMusic.SmokePopped"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Smoke_01.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "2.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "5"	
				// "syncpoints"
				// {
					// "syncpoints_1"
					// {
						// "1" "0.5"
						// "2"	"2.5"
					// }	
				// }
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"start_stack"
		{			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "8192" //Roshan
			}	
		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			
			"volume_fade_out"
			{
				"input_max" "3.0"
			}				
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
			
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack"
		{
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "8192" //Roshan
			}	
		}
	}
}

"DOTAMusic.StateSmokeEndedHero"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_roshan_battlemusic_entry" //play 
			{
				"input_execute"	"@music_playing_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.SmokeEndedHero" //Replace with the sound you want to play.
			}	
			
		}
	}
}

"DOTAMusic.SmokeEndedHero"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\stingers\DotA2_Music_Stinger_004.mp3" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.5"
				"end_point" "2.5"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "10"	
				// "syncpoints"
				// {
					// "syncpoints_1"
					// {
						// "1" "0.5"
						// "2"	"2.5"
					// }	
				// }
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}

"DOTAMusic.StateSmokeEndedTower"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_smoke_ended_tower_entry" //play 
			{
				"input_execute"	"@music_playing_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.SmokeEndedTower" //Replace with the sound you want to play.
			}	
			
		}
	}
}

"DOTAMusic.SmokeEndedTower"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Smoke_Dissipate.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "2.0"
				"end_point" "9.66"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "10"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "2.0"
						"2"	"9.66"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				// "autoqueue_entry_at_end_point" "DOTAMusic.StateExploreMusic"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}

"DOTAMusic.StateSmokeEndedCreep"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_start_check_music_not_playing"
			
			"play_smoke_ended_creep_entry" //play 
			{
				"input_execute"	"@music_playing_and.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.SmokeEndedCreep" //Replace with the sound you want to play.
			}			
		}
	}
}

"DOTAMusic.SmokeEndedCreep"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\DOTA2_Music_Smoke_Dissipate.wav" 
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "2.0"
				"end_point" "9.66"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "10"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "2.0"
						"2"	"9.66"
					}	
				}
				"override_priority" "false"	
			}
		}
		"prestart_stack" //replaces null.wav
 		{
 			// "sync_track_syncpoints"
 			// {
 				// "operator" "track_queue"
 				// "syncpoint_list" "syncpoints_1"
 			// }
 		}
		
		"update_stack"
		{	
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"speakers_output"
			{
				"input_speakers" "0.0"
			}
			
			"speakers_output_fix"
			{
				"operator" "sys_output"
				"input_speakers" "@speakers_limit.output" 
				"output" "speakers"
			}
		}
	}
}

"DOTAMusic.StateGankedMusic"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}	
			
			"gank_music_sm_compare_less" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.55"
			}	
			
			"gank_music_md_compare_greater" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than_or_equal"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.55"
			}
			
			"gank_music_md_compare_less" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.8"
			}
			
			"gank_music_md_compare_min" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@gank_music_md_compare_greater.output"
				"input2" "@gank_music_md_compare_less.output"
			}
			
			"gank_music_lg_compare_greater" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than_or_equal"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.8"
			}
			
			"play_ganked_entry_sm" //play 
			{
				"input_execute"	"@gank_music_sm_compare_less.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.GankedMusicSm" //Replace with the sound you want to play.
			}
			
			"play_ganked_entry_md" //play 
			{
				"input_execute"	"@gank_music_md_compare_min.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.GankedMusicMd" //Replace with the sound you want to play.
			}
			
			"play_ganked_entry_lg" //play 
			{
				"input_execute"	"@gank_music_lg_compare_greater.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.GankedMusicLg" //Replace with the sound you want to play.
			}	
			
            "get_debug_printing_opvar"
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************GANKED_MUSIC_REQUESTED**************" //print the smooth val
			{
				"input_execute" "@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "@gank_music_request_opvar.output"
			}	
			
			"block_ganked_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "10.0"
				"match_substring" "false"
				"match_entry" "DOTAMusic.StateGankedMusic"
				"match_channel" "false"
				"match_entity" "false"
			}		
		}
	}
}

"DOTAMusic.GankedMusicSm"
{
	"channel"		"CHAN_STATIC"
	// "volume"		"0.0"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\stingers\gank_1a.wav"
		"wave"			"music\stingers\gank_1b.wav"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.30"	
				"input_Y2" "0.25"	
				"input_X3" "0.4"	
				"input_Y3" "0.6"	
				"input_X4" "0.55"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"		
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}			
		}
	}
}

"DOTAMusic.GankedMusicMd"
{
	"channel"		"CHAN_STATIC"
	// "volume"		"0.0"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\stingers\gank_2a.wav"
		"wave"			"music\stingers\gank_2b.wav"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_gank"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.55"	
				"input_Y1" "0.25"	
				"input_X2" "0.65"	
				"input_Y2" "0.5"	
				"input_X3" "0.7"	
				"input_Y3" "0.7"	
				"input_X4" "0.8"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"	
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}	
		}
	}
}

"DOTAMusic.GankedMusicLg"
{
	"channel"		"CHAN_STATIC"
	// "volume"		"0.0"
	"volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\stingers\gank_3a.wav"
		"wave"			"music\stingers\gank_3b.wav"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.8"	
				"input_Y1" "0.25"	
				"input_X2" "0.9"	
				"input_Y2" "0.5"	
				"input_X3" "1.0"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"	
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}	
		}
	}
}

"DOTAMusic.StateGankMusic"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}	
			
			"gank_music_sm_compare_less" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.45"
			}	
			
			"gank_music_md_compare_greater" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than_or_equal"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.45"
			}
			
			"gank_music_md_compare_less" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "less_than"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.8"
			}
			
			"gank_music_md_compare_min" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "min"		
				"input1" "@gank_music_md_compare_greater.output"
				"input2" "@gank_music_md_compare_less.output"
			}
			
			"gank_music_lg_compare_greater" 
			{
				"input_execute"	"1.0"	
				"operator" "math_float"
				"apply" "greater_than_or_equal"		
				"input1" "@gank_music_request_opvar.output"
				"input2" "0.8"
			}
			
			"play_ganked_entry_sm" //play 
			{
				"input_execute"	"@gank_music_sm_compare_less.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.GankMusicSm" //Replace with the sound you want to play.
			}
			
			"play_ganked_entry_md" //play 
			{
				"input_execute"	"@gank_music_md_compare_min.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.GankMusicMd" //Replace with the sound you want to play.
			}
			
			"play_ganked_entry_lg" //play 
			{
				"input_execute"	"@gank_music_lg_compare_greater.output"
				"operator" "sys_start_entry"
				"execute_once" "false"
				"input_start" "1"
				"entry_name" "DOTAMusic.GankMusicLg" //Replace with the sound you want to play.
			}	
			
            "get_debug_printing_opvar"
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************GANK_MUSIC_REQUESTED**************" //print the smooth val
			{
				"input_execute" "@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "@gank_music_request_opvar.output"
			}	
			
			"block_gank_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "10.0"
				"match_substring" "false"
				"match_entry" "DOTAMusic.StateGankMusic"
				"match_channel" "false"
				"match_entity" "false"
			}		
		}
	}
}

"DOTAMusic.GankMusicSm" //0.15 - 0.45
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.0"
	// "volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"rndwave"
	{
		"wave"			"music\stingers\gank_sm_01.mp3"
		"wave"			"music\stingers\gank_sm_02.mp3"
	}
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.0"	
				"input_Y1" "0.0"	
				"input_X2" "0.25"	
				"input_Y2" "0.25"	
				"input_X3" "0.3"	
				"input_Y3" "0.6"	
				"input_X4" "0.55"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"		
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}			
		}
	}
}

"DOTAMusic.GankMusicMd" //0.45 - 0.8
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.0"
	// "volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\stingers\gank_md_01.mp3"
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.55"	
				"input_Y1" "0.25"	
				"input_X2" "0.65"	
				"input_Y2" "0.5"	
				"input_X3" "0.7"	
				"input_Y3" "0.7"	
				"input_X4" "0.8"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"	
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}	
		}
	}
}

"DOTAMusic.GankMusicLg" //0.8 - 1.0
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.0"
	// "volume"		"0.75"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\stingers\gank_lg_01.mp3"
	
	"operator_stacks"
	{
		"update_stack"
		{	
			"gank_music_request_opvar" 
			{
				"operator" "get_opvar_float"
				"opvar" "music_probability_ganker"	
			}		
		
			"remap_gank_opvar_value"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@gank_music_request_opvar.output"
				"input_X1" "0.8"	
				"input_Y1" "0.25"	
				"input_X2" "0.9"	
				"input_Y2" "0.5"	
				"input_X3" "1.0"	
				"input_Y3" "1.0"	
				"input_X4" "1.0"	
				"input_Y4" "1.0"	
			}	

			"import_stack" "dota_update_default"	
			"mixer"
			{
				"mixgroup" "Music"
			}
			"volume_accumulate"
			{
				"input12" "@remap_gank_opvar_value.output"
			}	
		}
	}
}

//BLOCKSTART //Tutorial
"Tutorial_1.Intro" //When the tutorial first starts
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.6"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave"			"*#music/stingers/halloween_stingers/roshan_trickortreat_start.mp3"
}

"Tutorial.Start" 
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"music/null_lp.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_START"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_mult_init"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_mult_tutorial"
				"input"	"0.1"
			}
			
			"tutorial_opvar_offset_init"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input"	"0.0"
			}
			
			"tutorial_opvar_sys_time_save_init"
			{
				"operator"	"set_opvar_float"
				"opvar"	"tutorial_sys_time"
				"input" "0.0"
			}
		}
		
		"update_stack"
		{	
			
			"tutorial_opvar_get_mult"
			{
				"operator"	"get_opvar_float"
				"opvar"	"music_intensity_mult_tutorial"
			}
			
			"tutorial_opvar_get_offset"
			{
				"operator"	"get_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
			}
			
			"elapsed_time"
			{
				"operator" "get_entry_time"
			}
			
			"operator_lfo_time_scale"
			{
				"operator" "math_float"
				"apply" "mult"
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "0.4"	
			}
			
			"operator_lfo"
			{
				"operator" "math_func1"
				"function" "cos"
				"normalize_trig" "false"	
				"input1" "@operator_lfo_time_scale.output"
			}

			"lfo_norm_remap"
			{
				"operator" "math_remap_float"
				"input" "@operator_lfo.output"
				"input_min" "-1.0"
				"input_max" "1.0"
				"input_map_min" "0.0"
				"input_map_max" "1.0"
				"default_to_max" "false"	
			}
			
			"scale_opvar_lfo"
			{
				"operator" "math_float"
				"apply" "mult"
				"input1" "@lfo_norm_remap.output"
				"input2" "@tutorial_opvar_get_mult.output"	
			}
			
			"add_offset"
			{
				"operator" "math_float"
				"apply" "add"
				"input1" "@tutorial_opvar_get_offset.output"
				"input2" "@scale_opvar_lfo.output"	
			}

			"lfo_norm_remap_music"
			{
				"operator" "math_remap_float"
				"input" "@add_offset.output"
				"input_min" "0.0"
				"input_max" "1.0"
				"input_map_min" "0.0"
				"input_map_max" "35.0"
				"default_to_max" "false"	
			}
			
			"time_elapsed_compare"
			{
				"operator" "math_float"
				"apply" "greater_than"
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "3.0"	
			}		
			
			"start_mainloop"
			{
				"operator" "sys_start_entry"
				"execute_once" "true"
				"input_execute"	"@time_elapsed_compare.output"
				"input_start" "1"
				"entry_name" "DOTAMusic.MainLoopTutorial" //Replace with the sound you want to play.
			}
			
			//Get the current sys_time
			
			"sys_time"
			{
				"operator" "get_sys_time"
			}
			
			//Get the previous sys time
			
			"tutorial_opvar_sys_time"
			{
				"operator"	"get_opvar_float"
				"opvar"	"tutorial_sys_time"
			}
			
			//if the difference is >= 1.0 seconds, set the intensity variable	
			
			"tutorial_time_difference"
			{
				"operator" "math_float"
				"apply" "sub"	
				"input1" "@sys_time.output_client_time"
				"input2" "@tutorial_opvar_sys_time.output"
			}
			
			"tutorial_time_difference_compare"
			{
				"operator" "math_float"
				"apply" "greater_than_or_equal"	
				"input1" "@tutorial_time_difference.output"
				"input2" "1.0"
			}		
			
			"tutorial_opvar_debug"
			{
				"input_execute" "@tutorial_time_difference_compare.output"
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_tutorial"
				"input"	"@lfo_norm_remap_music.output"
			}
			
			//And save the current sys_time as the previous sys_time.		
			
			"tutorial_opvar_sys_time_save"
			{
				"input_execute" "@tutorial_time_difference_compare.output"
				"operator"	"set_opvar_float"
				"opvar"	"tutorial_sys_time"
				"input" "@sys_time.output_client_time"
			}			
			
			//debug
			"tutorial_opvar_debug_01"
			{
				"operator"	"get_opvar_float"
				"opvar"	"music_intensity_tutorial"
			}
			
			// "tutorial_LFO_magic"
			// {
				// "operator" "util_print_float"
				// "input" "@tutorial_opvar_debug_01.output"	
			// }
		}
	}
}

"Tutorial.End" //At the end of the tutorial
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"music/null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_END"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
		}
	}
}

"Tutorial.Shopkeeper_01" //When you first meet the shopkeeper
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"music/null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_SHOP_01"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "0.2"
			}
		}
	}
}

"Tutorial.Shopkeeper_02" //When you complete your first big item (bracer ATM)
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.4"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	// "wave"	"music/stingers/DotA2_Music_Stinger_003.mp3"
	"wave"	"music/null"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_SHOP_02"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "0.4"
			}
		}
	}
}

"Tutorial.Quest.complete_01" //stinger When you complete mini quests within the tutorial
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"	
	"wave"	"#music/stingers/Quest_Complete_01.mp3"
	"operator_stacks"
	{
		"update_stack"
		{
			"import_stack" "dota_update_vo_clamped"
			"mixer"
			{
				"mixgroup" "Ultimates"
			}
		}
	}
}

"Tutorial.KOTL" //when you meet Keeper of the Light
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	//"wave"	"music/stingers/DotA2_Music_Stinger_008.mp3"
	"wave"	"music/null"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_KOTL"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "0.3"
			}
		}
	}
}
"Tutorial.Razor" //When you make Razor appear
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.5"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	
	"rndwave"
	{
		"wave"	"music/stingers/gank_2a.wav"
		"wave" 	"music/stingers/gank_2b.wav"
	}
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_RAZOR"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "0.8"
			}
		}
	}
}

"Tutorial.Tidehunter.Appear"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.5"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave" 			"#music/stingers/gank_2b.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_TIDE"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "1.0"
			}
		}
	}
}

"Tutorial.Tidehunter.Escape"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave" 			"music/stingers/DotA2_Music_Stinger_007.mp3"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_TIDE"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "0.3"
			}
		}
	}
}

"Tutorial.Tidehunter.Death"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	"wave" 			"music/stingers/gank_1a.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
			// "NOW_IN_TUTORIAL_TIDE"
			// {
				// "operator" "util_print_float"
				// "input" "1.0"	
			// }
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_intensity_offset_tutorial"
				"input" "0.3"
			}
		}
	}
}

"DOTAMusic.Tutorial_Ducker"
{
	"channel"		"CHAN_STATIC"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"*#music\tutorial04.mp3"
	
	"soundentry_version" "2"
	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.0"
				"end_point" "54.00"
				"track_name" "main"
				"sync_track_name" "main"
				"track_priority" "45"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "0"
// 						"2"	"5.59"
// 						"3"	"10.062"
// 						"4"	"14.534"
// 						"5" "19.006"
// 						"6"	"23.478"
// 						"7"	"27.95"
// 						"8"	"32.422"
// 						"9" "36.89"
					}	
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}	
			
			"import_stack" "dota_start_music_type_tracker"
			
			"add_music_value"
			{
				"input2" "4" //Battle
			}
			
			"import_stack"	"dota_spectator_flag_set"
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "TutorialMusic"
			}

			"volume_fade_out"
			{
				"input_max" "2.0"
			}
			
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic.BattleMusic_Epic_End_01"
				"stop_channel_on_track" "true"	
			}
		}
		
		"stop_stack" //have to do this in the syop stack, because _End doesnt get called in some cases (like death)
		{
			
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "4" //Battle
			}
			
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************BATTLE MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}

//BLOCKEND

//BLOCKSTART //Spectator Mode

"Spectator.HeroDeath" //When a hero dies
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.2"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	// "wave"	"#music/stingers/death.mp3"
	"wave"	"music/null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			"NOW_IN_SPECTATOR_HERO_DEATH"
			{
				"operator" "util_print_float"
				"input_execute" "@get_debug_printing_opvar.output"
				"input"	"1.0"
			}
			
			"tutorial_opvar_debug"
			{
				"operator"	"set_opvar_float"
				"opvar"	"music_spectator_hero_death"
				"input" "1.0"
			}
			
			"block_entries"
			{
				"operator" "sys_block_entries"
				"input_active" "1.0"	
				"input_duration" "10.0"
				"match_entry" "Spectator.HeroDeath"
				// "match_sound" "npc\dog\dog_idlemode_loop1.wav"
				"match_channel" "false"
				"match_entity" "false"
			}
			
			// "limit_sound_explore"
			// {
				// "operator" "sys_stop_entries"
				// "input_max_entries" "0.000000" //A sound will not stop itself from playing.
				// "match_entity" "false"	
				// "match_substring" "true"
				// "match_entry" "DOTAMusic.Explore"
			// }
			
			// "limit_sound_laning"
			// {
				// "operator" "sys_stop_entries"
				// "input_max_entries" "0.000000" //A sound will not stop itself from playing.
				// "match_entity" "false"	
				// "match_substring" "true"
				// "match_entry" "DOTAMusic.Laning"
			// }
		}
	}
}

"Spectator.RoshanFight" //Fighting Roshan
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	//"wave"			"*#music\DOTA2_Music_Battle_004_End.mp3"
	"wave"				"music/null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			"NOW_IN_SPECTATOR_ROSHAN_FIGHT"
			{
				"operator" "util_print_float"
				"input_execute" "@get_debug_printing_opvar.output"
				"input"	"1.0"
			}
			
			"get_roshan_attackers"
			{
				"operator" "get_opvar_float"
				"opvar" "music_spectator_roshan_attackers"
			}
			
			"roshan_attackers_compare"
			{	
				"operator" "math_float"
				"apply" "less_than"
				"input_execute"	"1.0"			
				"input1" "@get_roshan_attackers.output"
				"input2" "1.0"
			}
				
			"block_start" //if no one is attacking Roshan, don't music.
			{	
				"input_execute" "@roshan_attackers_compare.output"
				"operator" "sys_output"
				"input_float" "1"
				"output" "block_start"
			}
		}
	}	
}

"Spectator.RoshanFightToggle"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			"NOW_IN_SPECTATOR_ROSHAN_TOGGLE"
			{
				"operator" "util_print_float"
				"input_execute" "@get_debug_printing_opvar.output"
				"input"	"1.0"
			}
		}
	}
}

"Spectator.RoshanFightClient"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			"NOW_IN_SPECTATOR_ROSHAN_FIGHT_CLIENT"
			{
				"operator" "util_print_float"
				"input_execute" "@get_debug_printing_opvar.output"
				"input"	"1.0"
			}
		}
	}
}

"Spectator.RoshanDeath"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{	
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			"NOW_IN_SPECTATOR_ROSHAN_DEATH"
			{
				"operator" "util_print_float"
				"input_execute" "@get_debug_printing_opvar.output"
				"input"	"1.0"
			}
		}
	}
}

"Spectator.AncientKilled" //When you first meet the shopkeeper
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"
	
	"rndwave"
	{
		"wave"			"#music/stingers/DOTA2_Music_Victory_Radiant_Comp.mp3"
		"wave"			"#music/stingers/DOTA2_Music_Victory_Dire.mp3"
	}	
	
	"operator_stacks"
	{
		"start_stack"
		{	
            "get_debug_printing_opvar" //set the opvar to 0.0, do this once only.  //this is for debugging
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}  
			
			"NOW_IN_SPECTATOR_ANCIENT_KILLED"
			{
				"operator" "util_print_float"
				"input_execute" "@get_debug_printing_opvar.output"
				"input"	"1.0"
			}
		}
	}
}
	

//BLOCKEND

//BLOCKSTART //TEST SCRIPTS
"Dave.TestMusSetOpVarMin"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"update_stack"
		{
			"import_stack" "dota_debug_opvar_smooth"
			
			"get_debug_opvar" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity"
			}
		
			"set_debug_opvar"
			{
				"opvar" "music_intensity" //same as above
			}	
		
			"debug_battle_score_ramp" //ramp from the current smoothed battle score to the new game score
			{
				"input_end_value" "0.0"
			}			
		}
	} 
}

"Dave.TestMusSetOpVarLow"
{  
	"channel"		"CHAN_AUTO"
	"volume"		"0.1"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"music\null_lp.wav"
	
	"operator_stacks"
	{
		"update_stack"
		{
			"import_stack" "dota_debug_opvar_smooth"
			
			"get_debug_opvar" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity"
			}
		
			"set_debug_opvar"
			{
				"opvar" "music_intensity" //same as above
			}	
		
			"debug_battle_score_ramp" //ramp from the current smoothed battle score to the new game score
			{
				"input_end_value" "0.33"
			}			
		}
	} 
}

"Dave.TestMusSetOpVarMed"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"update_stack"
		{
			"import_stack" "dota_debug_opvar_smooth"
			
			"get_debug_opvar" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity"
			}
		
			"set_debug_opvar"
			{
				"opvar" "music_intensity" //same as above
			}	
		
			"debug_battle_score_ramp" //ramp from the current smoothed battle score to the new game score
			{
				"input_end_value" "0.67"
			}			
		}
	} 
}

"Dave.TestMusSetOpVarHi"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null_lp.wav"
	"operator_stacks"
	{
		"update_stack"
		{
			"import_stack" "dota_debug_opvar_smooth"
			
			"get_debug_opvar" //Get the current from-the-game battle score
			{
				"opvar" "music_intensity"
			}
		
			"set_debug_opvar"
			{
				"opvar" "music_intensity" //same as above
			}	
		
			"debug_battle_score_ramp" //ramp from the current smoothed battle score to the new game score
			{
				"input_end_value" "1.0"
			}			
		}
	} 
}

"Dave.TestTracks"
{
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{

			"play_entry_02"
			{
				"operator" "sys_start_entry"
				"input_start" "1"	
				"entry_name" "DOTAMusic.BattleMusic_Epic_Picker"
			}

			"play_entry_01"
			{
				"operator" "sys_start_entry"
				"input_start" "1"	
				"entry_name" "DOTAMusic.StateHeroDeath"	
			}
		}
	}
}

"Dave.TestImporting"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"import_stack" "dota_attack_block_dist"
			"import_stack" "dota_random_delay_start"
			
			"get_random_delay"
			{
				"input_min" "0.1"
				"input_max" "1.0"
			}
		}
	}
}

"Dave.TestSmoke"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			
			"inc_opvar"
			{
 				"operator" "increment_opvar_float"
 				"opvar" "dota_test_smoke"
				"input" "10.0"
			}
			
			"print_inc_opvar"
			{
				"operator" "util_print_float"
				"input" "@inc_opvar.output"
			}
		}
	}
}

"Dave.TestSmokeOffStinger"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			
			"inc_opvar"
			{
 				"operator" "increment_opvar_float"
 				"opvar" "dota_test_smoke"
				"input" "-10.0"
			}
			
			"print_inc_opvar"
			{
				"operator" "util_print_float"
				"input" "@inc_opvar.output"
			}
		}
	}
}

"Dave.TestSmokeOffAttack"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			
			"inc_opvar"
			{
 				"operator" "increment_opvar_float"
 				"opvar" "dota_test_smoke"
				"input" "-100.0"
			}
			
			"print_inc_opvar"
			{
				"operator" "util_print_float"
				"input" "@inc_opvar.output"
			}
		}
	}
}

"Dave.TestLogicSwitch"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			"test_switch"
			{
				"operator" "get_opvar_float"
				"opvar" "test_logic_switch_opvar"
			}
		
			"inc_opvar"
			{
 				"operator" "increment_opvar_float"
 				"opvar" "dota_test_logic"
				"input" "1.0"
			}
			
			"test_logic_switch"
			{
				"operator" "math_logic_switch"
				"input1" "1.0"
				"input2" "@inc_opvar.output"
				"input_switch" "@test_switch.output"
			}
			
			"print_inc_opvar"
			{
				"operator" "util_print_float"
				"input" "@test_logic_switch.output"
			}
		}
	}
}

"Dave.TestIncrement"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	
	"operator_stacks"
	{
		"start_stack"
		{
			
			"inc_opvar"
			{
 				"operator" "increment_opvar_float"
 				"opvar" "dota_test_increment"
				"input" "-2.5"
			}
			
			"print_inc_opvar"
			{
				"operator" "util_print_float"
				"input" "@inc_opvar.output"
			}
		}
	}
}

"Mike.TestRandomSeeding"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"music\null.wav"
	"operator_stacks"
	{
		"start_stack"
		{
			"random"
			{
				"operator" "math_random"
				"input_min" "0.0"
				"input_max" "1.0"
				"input_seed" "1.0"
			}
			"****PRINTRANDOM"
			{
				"operator" "util_print_float"
				"input" "@random.output"
			}
			
		}
	} 
}

"Mike.TestTimer"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"#music/stingers/respawn.mp3"

	"operator_stacks"
	{
		"update_stack"
		{
			"elapsed_time"
			{
				"operator" "get_entry_time"
			}
			"start_timer"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "1.0"
			}
			"stop_timer"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "5.0"
			}
			"timer"
			{
				"operator" "util_timer"
				"input_start" "@start_timer.output"
				"input_stop" "@stop_timer.output"
			}
			"****PRINTTIMER"
			{
				"operator" "util_print_float"
				"input" "@timer.output"
			}
			
		}
	} 
}
"Mike.TestTimerRamp"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"#music/stingers/respawn.mp3"

	"operator_stacks"
	{
		"update_stack"
		{

			"get_convar"
			{
				"operator" "get_convar"
				"convar" "snd_op_test_convar"
			}

			"elapsed_time"
			{
				"operator" "get_entry_time"
			}

			"start_timer"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "3.0"
			}
			"stop_timer"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "15.0"
			}
			"timer_ramp"
			{
				"operator" "util_timer_ramp"
				"input_start" "1"
				"input_stop" "@get_convar.output"
				"input_start_value" "15.0"
				"input_end_value" "10.0"
				"input_duration" "10.0"
			}
			"****PRINTTIMER_2"
			{
				"operator" "util_print_float"
				"input" "@timer.output"
			}
		}
	} 
}




/////////////////////
// BEGIN BATTLE SCORE SMOOTHING //////
//////////////////////////////////                      
"Mike.TestDF"
{  

	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"#ui/stingers/respawn.mp3"

	"operator_stacks"
	{
		"update_stack"
		{

 			"get_battle_score_opvar" //Get the current from-the-game battle score
 			{
 				"operator" "get_opvar_float"
 				"opvar" "dota_music_intensity"
 			}
   	   	   	
            "get_battle_score_smooth_opvar" //get our smoothed version of the battle score
            {
                    "operator" "get_opvar_float"
                    "opvar" "dota_battle_score_smooth"
            }
             
            "battle_score_delta" //Detect if the game-side battle score has changed
            {
                    "operator" "math_delta"
                    "input" "@get_battle_score_opvar.output"        
            }
            
            "battle_score_delta_invert"
            {
                    "operator" "math_float"
                    "apply" "sub"   
                    "input1" "1.0"
                    "input2" "@battle_score_delta.output"
            }
            
            // find the difference between the current value and our target value, 
            // and get a time value based on that
            
            "battle_score_difference"
            {
                    "operator" "math_float"
                    "apply" "sub"   
                    "input1" "@get_battle_score_opvar.output"
                    "input2" "@get_battle_score_smooth_opvar.output"
            }                       
            
            "abs_travel_distance"
            {
                    "operator" "math_func1"
                    "function"      "fabs"
                    "input1" "@battle_score_difference.output"
            }                       
            
            "remap_travel_distance_to_time"
            {
                    "operator" "math_remap_float"
                    "input" "@abs_travel_distance.output"
                    "input_min" "0.0"
                    "input_max" "1.0"
                    "input_map_min" "0.0"
                    "input_map_max" "5.0"
                    "default_to_max" "false"        
            }
                                    
            "battle_score_ramp" //ramp from the current smoothed battle score to the new game score
            {
                    "operator" "util_timer_ramp"
                    "input_start" "1"
                    "input_stop" "@battle_score_delta.output"
                    "input_start_value" "@get_battle_score_smooth_opvar.output"
                    "input_end_value" "@get_battle_score_opvar.output"
                    "input_duration" "1000"
            }               
                                    
            "set_opvar" //set the current smooth opvar val
            {
                    "operator" "set_opvar_float"
                    "opvar" "dota_battle_score_smooth"
                    "input" "@battle_score_ramp.output"
			}

            "stop_execution" //set the current smooth opvar val
            {
                    "operator" "set_convar"
                    "convar" "snd_sos_exec_when_paused"
                    "input" "0"
			}
		}
	}	
}

"Mike.TestSetConvar"
{  

	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"#ui/stingers/respawn.mp3"

	"soundentry_version" "2"

	"operator_stacks"
	{
		"start_stack"
		{
            "stop_execution" //set the current smooth opvar val
            {
				"operator" "set_convar"
                "convar" "snd_sos_exec_when_paused"
                "input" "0"
			}
		}
	}	
}

"Mike.TestCurve4"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
	"wave"			"#ui/stingers/respawn.mp3"

	"operator_stacks"
	{
		"update_stack"
		{
			"elapsed_time"
			{
				"operator" "get_entry_time"
			}
			"start_timer"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "1.0"
			}
			"stop_timer"
			{
				"operator" "math_float"
				"apply" "greater_than"	
				"input1" "@elapsed_time.output_entry_elapsed"
				"input2" "15.0"
			}
			"timer"
			{
				"operator" "util_timer"
				"input_start" "@start_timer.output"
				"input_stop" "@stop_timer.output"
			}
			"curve4_1"
			{
				"operator" "math_curve_2d_4knot"
				"curve_type" "linear"	
				"input" "@timer.output"
				"input_X1" "1.0"	
				"input_Y1" "4.0"	
				"input_X2" "2.0"	
				"input_Y2" "3.0"	
				"input_X3" "3.0"	
				"input_Y3" "2.0"	
				"input_X4" "4.0"	
				"input_Y4" "1.0"	

			}

			"****PRINTCURVE"
			{
				"operator" "util_print_float"
				"input" "@curve4_1.output"
			}
			
		}
	} 
}

"MikeTEST.Stoptrack1"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.5"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\hero_select_underscore_loop.wav"

	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"track_name" "track_to_be_stopped_1"
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
			}
		}
	}
}
"MikeTEST.Stoptrack2"
{
	"channel"	"CHAN_AUTO"
	"volume"	"0.5"
	"soundlevel"  "SNDLVL_NONE"
	"wave"	"*#music\hero_select_underscore_loop.wav"

	"operator_stacks"
	{
		"soundentry_operator_data"
		{
			"track_data"
			{
				"track_name" "track_to_be_stopped_2"
			}
		}
		"update_stack"
		{
			"import_stack" "dota_update_music_stereo"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
			}
		}
	}
}

"Mike.Stop1"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
//	"wave"			"#ui/stingers/respawn.mp3"
	"wave"			"null.wav"

	"operator_stacks"
	{
		"start_stack"
		{
			"stop_track"
			{
				"operator" "track_stop"
				"track_name" "track_to_be_stopped_1"
			}
		}
	} 
}
"Mike.Stop2"
{  
	"channel"		"CHAN_STATIC"
	"volume"		"0.3"
	"soundlevel"	"SNDLVL_NONE"
//	"wave"			"#ui/stingers/respawn.mp3"
	"wave"			"null.wav"

	"operator_stacks"
	{
		"start_stack"
		{
			"stop_track"
			{
				"operator" "track_stop"
				"track_name" "track_to_be_stopped_2"
			}
		}
	} 
}

// "frostivus_win_Stinger"
// {
// 	"channel"		"CHAN_AUTO"
// 	"volume"		"0.6"
// 	"soundlevel"  "SNDLVL_81dB"
// 	"pitch"			"PITCH_NORM"
// 
// 	"wave"			"#music/stingers/greevil_stingers/Frostivus_2013_Win.mp3"
// 
// 	"soundentry_version" "2"
// 	"operator_stacks"
// 	{	
// 		"soundentry_operator_data"
// 		{
// 			"track_data"
// 			{
// 				"start_point" "0.00"
// 				"track_name" "main"
// 				"track_priority" "60"	
// 			}
// 		}
// 		
// 		"start_stack"
// 		{
// 			"delay_output"
//             {
//              "operator" "sys_output"
//              "input_float" "1.0"
//              "output" "delay"
//             }
// 			
// 			"import_stack" "dota_start_music_type_tracker"
// 			
// 			"stop_death_track"
// 			{
// 				"operator" "track_stop"
// 				"track_name" "dead"
// 			}
// 			
// 			"stop_stinger_track"
// 			{
// 				"operator" "track_stop"
// 				"track_name" "stinger_high_priority"
// 			}
// 				
// 			"add_music_value"
// 			{
// 				"input2" "32" //Respawn Value
// 			}
// 			
//             "get_debug_printing_opvar" 
//             {
// 				"operator" "get_opvar_float"
// 				"opvar" "debug_print_music"
// 			}
// 			
// 			"**************RESPAWN MUSIC STARTED**************" 
// 			{
// 				"execute_once" "false"
// 				"input_execute"	"@get_debug_printing_opvar.output"
// 				"operator" "util_print_float"
// 				"input" "1.0"
// 			}
// 		}
// 		
// 		"update_stack"
// 		{
// 			"import_stack" "dota_update_default"
// 			"mixer"
// 			{
// 				"mixgroup" "Ultimates"
// 			}
// // 			"speakers_spatialize"
// // 			{
// // 				"input_radius"  "1000"
// // 			}
// 			"update_track"
// 			{
// 				"operator" "track_update"
// 				"stop_channel_on_track" "true"	
// 			}
// 			
// 			"stop_death_track"
// 			{
// 				"operator" "track_stop"
// 				"track_name" "dead"
// 			}
// 		}
// 		
// 		"stop_stack"
// 		{	
// 			"import_stack" "dota_stop_music_type_tracker"
// 			
// 			"remove_music_value"
// 			{
// 				"input2" "32" //Respawn
// 			}	
// 			
//             "get_debug_printing_opvar" 
//             {
// 				"operator" "get_opvar_float"
// 				"opvar" "debug_print_music"
// 			}
// 			
// 			"**************RESPAWN MUSIC KILLED**************" 
// 			{
// 				"execute_once" "false"
// 				"input_execute"	"@get_debug_printing_opvar.output"
// 				"operator" "util_print_float"
// 				"input" "1.0"
// 			}
// 		}
// 	}
// }
// 
// "frostivus_lose_Stinger"
// {
// 	"channel"		"CHAN_AUTO"
// 	"volume"		"0.6"
// 	"soundlevel"  "SNDLVL_81dB"
// 	"pitch"			"PITCH_NORM"
// 
// 	"wave"			"#music/stingers/greevil_stingers/Frostivus_2013_Lose.mp3"
// 
// 	"soundentry_version" "2"
// 	"operator_stacks"
// 	{	
// 		"soundentry_operator_data"
// 		{
// 			"track_data"
// 			{
// 				"start_point" "0.00"
// 				"track_name" "main"
// 				"track_priority" "60"	
// 			}
// 		}
// 		
// 		"start_stack"
// 		{
// 			"delay_output"
//             {
//              "operator" "sys_output"
//              "input_float" "1.0"
//              "output" "delay"
//             }
// 			
// 			"import_stack" "dota_start_music_type_tracker"
// 			
// 			"stop_death_track"
// 			{
// 				"operator" "track_stop"
// 				"track_name" "dead"
// 			}
// 			
// 			"stop_stinger_track"
// 			{
// 				"operator" "track_stop"
// 				"track_name" "stinger_high_priority"
// 			}
// 				
// 			"add_music_value"
// 			{
// 				"input2" "32" //Respawn Value
// 			}
// 			
//             "get_debug_printing_opvar" 
//             {
// 				"operator" "get_opvar_float"
// 				"opvar" "debug_print_music"
// 			}
// 			
// 			"**************RESPAWN MUSIC STARTED**************" 
// 			{
// 				"execute_once" "false"
// 				"input_execute"	"@get_debug_printing_opvar.output"
// 				"operator" "util_print_float"
// 				"input" "1.0"
// 			}
// 		}
// 		
// 		"update_stack"
// 		{
// 			"import_stack" "dota_update_default"
// 			"mixer"
// 			{
// 				"mixgroup" "Ultimates"
// 			}
// // 			"speakers_spatialize"
// // 			{
// // 				"input_radius"  "1000"
// // 			}
// 			"update_track"
// 			{
// 				"operator" "track_update"
// 				"stop_channel_on_track" "true"	
// 			}
// 			
// 			"stop_death_track"
// 			{
// 				"operator" "track_stop"
// 				"track_name" "dead"
// 			}
// 		}
// 		
// 		"stop_stack"
// 		{	
// 			"import_stack" "dota_stop_music_type_tracker"
// 			
// 			"remove_music_value"
// 			{
// 				"input2" "32" //Respawn
// 			}	
// 			
//             "get_debug_printing_opvar" 
//             {
// 				"operator" "get_opvar_float"
// 				"opvar" "debug_print_music"
// 			}
// 			
// 			"**************RESPAWN MUSIC KILLED**************" 
// 			{
// 				"execute_once" "false"
// 				"input_execute"	"@get_debug_printing_opvar.output"
// 				"operator" "util_print_float"
// 				"input" "1.0"
// 			}
// 		}
// 	}
// }

//BLOCKEND

//arcana stingers

"DOTAMusic.StateHeroDeath.Terrorblade"
{
	"channel"		"CHAN_AUTO"
	"volume"		"1.0"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"	"#music/stingers/arcana/tb/death.mp3"

	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "stinger_high_priority"
				//"sync_track_name" "main"
				"track_priority" "50"	
				"syncpoints"
				{
					"syncpoints_1"
					{
						"1" "1.118"
					}
				}
				"override_priority" "false"	
			}
		}
		
		"prestart_stack" //replaces null.wav
 		{
 			"sync_track_syncpoints"
 			{
 				"operator" "track_queue"
 				"syncpoint_list" "syncpoints_1"
 			}
 		}
		
		"start_stack"
		{
			"get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************TRANSITION TO DEATH MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
			
			"limit_sound_explore"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.Explore" //We allow no instances of Explore when the death stinger knells		
			}
			
			"limit_sound_laning"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.Laning"
			}
			
			"limit_sound_battle"
			{
				"operator" "sys_stop_entries"
				"input_max_entries" "0.000000" //A sound will not stop itself from playing.
				"match_entity" "false"	
				"match_substring" "true"
				"match_entry" "DOTAMusic.BattleMusic" //We allow no instances of battle when the death stinger knells		
			}
			
			"stop_main_track"
			{
				"operator" "track_stop"
				"track_name" "main"
			}
		}
			
		"update_stack"
		{
			"import_stack" "dota_update_death_music"
			"mixer"
			{
				"mixgroup" "Music"
			}
			"update_track"
			{
				"operator" "track_update"
				"autoqueue_entry_at_end_point" "DOTAMusic_Hero.DeathMode"
				"stop_channel_on_track" "true"	
			}
		}
	}
}

"DOTAMusic_Hero.Respawn.Terrorblade"
{
	"channel"		"CHAN_AUTO"
	"volume"		"0.8"
	"soundlevel"	"SNDLVL_NONE"
	"pitch"			"PITCH_NORM"

	"wave"			"#music/stingers/arcana/tb/respawn.mp3"
	"soundentry_version" "2"
	"operator_stacks"
	{	
		"soundentry_operator_data"
		{
			"track_data"
			{
				"start_point" "0.00"
				"track_name" "main"
				"track_priority" "60"	
			}
		}
		
		"start_stack"
		{
			"delay_output"
            {
             "operator" "sys_output"
             "input_float" "1.0"
             "output" "delay"
            }
			
			"import_stack" "dota_start_music_type_tracker"
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
			
			"stop_stinger_track"
			{
				"operator" "track_stop"
				"track_name" "stinger_high_priority"
			}
				
			"add_music_value"
			{
				"input2" "32" //Respawn Value
			}
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC STARTED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
		
		"update_stack"
		{
			"import_stack" "dota_update_default"
			"mixer"
			{
				"mixgroup" "Stingers"
			}
			"speakers_spatialize"
			{
				"input_radius"  "1000"
			}
			"update_track"
			{
				"operator" "track_update"
				"stop_channel_on_track" "true"	
			}
			
			"stop_death_track"
			{
				"operator" "track_stop"
				"track_name" "dead"
			}
		}
		
		"stop_stack"
		{	
			"import_stack" "dota_stop_music_type_tracker"
			
			"remove_music_value"
			{
				"input2" "32" //Respawn
			}	
			
            "get_debug_printing_opvar" 
            {
				"operator" "get_opvar_float"
				"opvar" "debug_print_music"
			}
			
			"**************RESPAWN MUSIC KILLED**************" 
			{
				"execute_once" "false"
				"input_execute"	"@get_debug_printing_opvar.output"
				"operator" "util_print_float"
				"input" "1.0"
			}
		}
	}
}
